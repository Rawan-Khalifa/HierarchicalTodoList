{"ast":null,"code":"import axios from 'axios';\n\n// Ensure axios always sends cookies with requests\naxios.defaults.withCredentials = true;\n\n// Use .env or default localhost\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Set up an interceptor to handle 401 responses\naxios.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    // Automatically redirect to login page\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Create axios instance with base URL and credentials\nconst api = axios.create({\n  baseURL: \"http://localhost:5001/api\",\n  withCredentials: true\n});\n\n// Add request interceptor to handle errors\napi.interceptors.request.use(config => {\n  // Check if the backend is available before making the request\n  return config;\n}, error => {\n  console.error(\"API Request Error:\", error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (error.code === \"ERR_NETWORK\") {\n    // Handle network errors (e.g., backend not running)\n    console.error(\"Network Error: Backend might not be running\");\n    return Promise.reject(new Error(\"Cannot connect to the server. Please ensure the backend is running.\"));\n  }\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Handle unauthorized access\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n    window.location.href = \"/login\";\n    return Promise.reject(new Error(\"Session expired. Please login again.\"));\n  }\n  return Promise.reject(error);\n});\n\n// Authentication\n/**\n * Register a new user.\n * POST /api/auth/register\n * Body: { username, password }\n */\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/api/auth/register`, {\n      username,\n      password\n    });\n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    return {\n      success: false,\n      error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Registration failed'\n    };\n  }\n};\n\n/**\n * Log in a user.\n * POST /api/auth/login\n * Body: { username, password }\n */\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/api/auth/login`, {\n      username,\n      password\n    });\n    localStorage.setItem('user', JSON.stringify(response.data.user));\n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    return {\n      success: false,\n      error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Login failed'\n    };\n  }\n};\nexport const logoutUser = async () => {\n  try {\n    await api.post(\"/auth/logout\");\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n    delete api.defaults.headers.common[\"Authorization\"];\n    return {\n      success: true\n    };\n  } catch (error) {\n    // Still remove local storage items even if the API call fails\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n    delete api.defaults.headers.common[\"Authorization\"];\n    return {\n      success: false,\n      error: error.message || \"Logout failed\"\n    };\n  }\n};\n\n// Todo Lists\n/**\n * Get all TodoLists for the current user\n * GET /api/todos/lists\n */\nexport const getTodoLists = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/api/todos/lists`);\n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    return {\n      success: false,\n      error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to fetch lists'\n    };\n  }\n};\n\n/**\n * Create a new todo list.\n * POST /api/todos/list\n * Body: { title }\n */\nexport const createList = async title => {\n  try {\n    const response = await axios.post(`${API_URL}/api/todos/list`, {\n      title\n    });\n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    return {\n      success: false,\n      error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Failed to create list'\n    };\n  }\n};\n\n/**\n * Create a new todo item.\n * POST /api/todos/item\n * Body: { list_id, content }\n */\nexport const createItem = async (listId, content) => {\n  try {\n    const response = await axios.post(`${API_URL}/api/todos/item`, {\n      list_id: listId,\n      content\n    });\n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    return {\n      success: false,\n      error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || 'Failed to create item'\n    };\n  }\n};\n\n// Tasks\nexport const getTasks = async listId => {\n  try {\n    const response = await api.get(`/todos/tasks/${listId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching tasks:\", error);\n    throw new Error(error.message || \"Failed to load tasks\");\n  }\n};\nexport const createTask = async taskData => {\n  try {\n    const response = await api.post(\"/todos/task\", taskData);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error creating task:\", error);\n    throw new Error(error.message || \"Failed to create task\");\n  }\n};\nexport const updateTaskStatus = async (taskId, status) => {\n  try {\n    const response = await api.patch(`/todos/task/${taskId}/status`, {\n      status\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error updating task status:\", error);\n    throw new Error(error.message || \"Failed to update task status\");\n  }\n};\n\n// Set token on app initialization\nconst token = localStorage.getItem(\"token\");\nif (token) {\n  api.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n}\nexport default api;","map":{"version":3,"names":["axios","defaults","withCredentials","API_URL","process","env","REACT_APP_API_URL","interceptors","response","use","error","status","window","location","href","Promise","reject","api","create","baseURL","request","config","console","_error$response","code","Error","localStorage","removeItem","registerUser","username","password","post","success","data","_error$response2","_error$response2$data","loginUser","setItem","JSON","stringify","user","_error$response3","_error$response3$data","logoutUser","headers","common","message","getTodoLists","get","_error$response4","_error$response4$data","createList","title","_error$response5","_error$response5$data","createItem","listId","content","list_id","_error$response6","_error$response6$data","getTasks","createTask","taskData","updateTaskStatus","taskId","patch","token","getItem"],"sources":["/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Ensure axios always sends cookies with requests\naxios.defaults.withCredentials = true;\n\n// Use .env or default localhost\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Set up an interceptor to handle 401 responses\naxios.interceptors.response.use(\n  response => response,\n  error => {\n    if (error.response && error.response.status === 401) {\n      // Automatically redirect to login page\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Create axios instance with base URL and credentials\nconst api = axios.create({\n  baseURL: \"http://localhost:5001/api\",\n  withCredentials: true,\n})\n\n// Add request interceptor to handle errors\napi.interceptors.request.use(\n  (config) => {\n    // Check if the backend is available before making the request\n    return config\n  },\n  (error) => {\n    console.error(\"API Request Error:\", error)\n    return Promise.reject(error)\n  },\n)\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.code === \"ERR_NETWORK\") {\n      // Handle network errors (e.g., backend not running)\n      console.error(\"Network Error: Backend might not be running\")\n      return Promise.reject(new Error(\"Cannot connect to the server. Please ensure the backend is running.\"))\n    }\n\n    if (error.response?.status === 401) {\n      // Handle unauthorized access\n      localStorage.removeItem(\"user\")\n      localStorage.removeItem(\"token\")\n      window.location.href = \"/login\"\n      return Promise.reject(new Error(\"Session expired. Please login again.\"))\n    }\n\n    return Promise.reject(error)\n  },\n)\n\n// Authentication\n/**\n * Register a new user.\n * POST /api/auth/register\n * Body: { username, password }\n */\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/api/auth/register`, { username, password });\n    return { success: true, data: response.data };\n  } catch (error) {\n    return { success: false, error: error.response?.data?.error || 'Registration failed' };\n  }\n};\n\n/**\n * Log in a user.\n * POST /api/auth/login\n * Body: { username, password }\n */\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/api/auth/login`, { username, password });\n    localStorage.setItem('user', JSON.stringify(response.data.user));\n    return { success: true, data: response.data };\n  } catch (error) {\n    return { success: false, error: error.response?.data?.error || 'Login failed' };\n  }\n};\n\nexport const logoutUser = async () => {\n  try {\n    await api.post(\"/auth/logout\")\n    localStorage.removeItem(\"user\")\n    localStorage.removeItem(\"token\")\n    delete api.defaults.headers.common[\"Authorization\"]\n    return { success: true }\n  } catch (error) {\n    // Still remove local storage items even if the API call fails\n    localStorage.removeItem(\"user\")\n    localStorage.removeItem(\"token\")\n    delete api.defaults.headers.common[\"Authorization\"]\n    return {\n      success: false,\n      error: error.message || \"Logout failed\",\n    }\n  }\n}\n\n// Todo Lists\n/**\n * Get all TodoLists for the current user\n * GET /api/todos/lists\n */\nexport const getTodoLists = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/api/todos/lists`);\n    return { success: true, data: response.data };\n  } catch (error) {\n    return { success: false, error: error.response?.data?.error || 'Failed to fetch lists' };\n  }\n};\n\n/**\n * Create a new todo list.\n * POST /api/todos/list\n * Body: { title }\n */\nexport const createList = async (title) => {\n  try {\n    const response = await axios.post(`${API_URL}/api/todos/list`, { title });\n    return { success: true, data: response.data };\n  } catch (error) {\n    return { success: false, error: error.response?.data?.error || 'Failed to create list' };\n  }\n};\n\n/**\n * Create a new todo item.\n * POST /api/todos/item\n * Body: { list_id, content }\n */\nexport const createItem = async (listId, content) => {\n  try {\n    const response = await axios.post(`${API_URL}/api/todos/item`, { list_id: listId, content });\n    return { success: true, data: response.data };\n  } catch (error) {\n    return { success: false, error: error.response?.data?.error || 'Failed to create item' };\n  }\n};\n\n// Tasks\nexport const getTasks = async (listId) => {\n  try {\n    const response = await api.get(`/todos/tasks/${listId}`)\n    return response.data\n  } catch (error) {\n    console.error(\"Error fetching tasks:\", error)\n    throw new Error(error.message || \"Failed to load tasks\")\n  }\n}\n\nexport const createTask = async (taskData) => {\n  try {\n    const response = await api.post(\"/todos/task\", taskData)\n    return response.data\n  } catch (error) {\n    console.error(\"Error creating task:\", error)\n    throw new Error(error.message || \"Failed to create task\")\n  }\n}\n\nexport const updateTaskStatus = async (taskId, status) => {\n  try {\n    const response = await api.patch(`/todos/task/${taskId}/status`, { status })\n    return response.data\n  } catch (error) {\n    console.error(\"Error updating task status:\", error)\n    throw new Error(error.message || \"Failed to update task status\")\n  }\n}\n\n// Set token on app initialization\nconst token = localStorage.getItem(\"token\")\nif (token) {\n  api.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`\n}\n\nexport default api;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}