{"ast":null,"code":"import axios from 'axios';\n\n// Use the API URL from environment or default to localhost\nconst API_URL = process.env.REACT_APP_API_URL || 'http://127.0.0.1:5000';\n\n// Get tasks for a given list\nexport const getTasksForList = async listId => {\n  const response = await axios.get(`${API_URL}/api/todos/tasks/${listId}`);\n  return response.data; // Returns an array of tasks\n};\n\n// Update the task's status (Todo, In Progress, Done)\nexport const updateTaskStatus = async (taskId, newStatus) => {\n  const response = await axios.patch(`${API_URL}/api/todos/task/${taskId}/status`, {\n    status: newStatus\n  });\n  return response.data; // Returns the updated task or status\n};\n\n// Add a new task\nexport const addTask = async (description, listId, parentId, status = 'Todo') => {\n  const response = await axios.post(`${API_URL}/api/todos/task`, {\n    description,\n    list_id: listId,\n    parent_id: parentId,\n    status\n  });\n  return response.data; // Returns the newly created task\n};\n\n// Get all the todo lists of a user\nexport const getTodoLists = async userId => {\n  const response = await axios.get(`${API_URL}/api/todos/lists/${userId}`);\n  return response.data;\n};\n\n// Create a new todo list\nexport const createTodoList = async (title, userId) => {\n  const response = await axios.post(`${API_URL}/api/todos/lists/${userId}`, {\n    title,\n    user_id: userId\n  });\n  return response.data; // Returns the new list\n};\n\n// Register a new user\nexport const registerUser = async (username, password) => {\n  const response = await axios.post(`${API_URL}/api/auth/register`, {\n    username,\n    password\n  });\n  return response.data; // Returns the registration response message\n};\n\n// Login a user\nexport const loginUser = async (username, password) => {\n  const response = await axios.post(`${API_URL}/api/auth/login`, {\n    username,\n    password\n  });\n  return response.data; // Returns the login response message\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","getTasksForList","listId","response","get","data","updateTaskStatus","taskId","newStatus","patch","status","addTask","description","parentId","post","list_id","parent_id","getTodoLists","userId","createTodoList","title","user_id","registerUser","username","password","loginUser"],"sources":["/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Use the API URL from environment or default to localhost\nconst API_URL = process.env.REACT_APP_API_URL || 'http://127.0.0.1:5000';\n\n// Get tasks for a given list\nexport const getTasksForList = async (listId) => {\n  const response = await axios.get(`${API_URL}/api/todos/tasks/${listId}`);\n  return response.data; // Returns an array of tasks\n};\n\n// Update the task's status (Todo, In Progress, Done)\nexport const updateTaskStatus = async (taskId, newStatus) => {\n  const response = await axios.patch(`${API_URL}/api/todos/task/${taskId}/status`, {\n    status: newStatus,\n  });\n  return response.data; // Returns the updated task or status\n};\n\n// Add a new task\nexport const addTask = async (description, listId, parentId, status = 'Todo') => {\n  const response = await axios.post(`${API_URL}/api/todos/task`, {\n    description,\n    list_id: listId,\n    parent_id: parentId,\n    status,\n  });\n  return response.data; // Returns the newly created task\n};\n\n// Get all the todo lists of a user\nexport const getTodoLists = async (userId) => {\n  const response = await axios.get(`${API_URL}/api/todos/lists/${userId}`);\n  return response.data;\n};\n\n// Create a new todo list\nexport const createTodoList = async (title, userId) => {\n  const response = await axios.post(`${API_URL}/api/todos/lists/${userId}`, {\n    title,\n    user_id: userId,\n  });\n  return response.data; // Returns the new list\n};\n\n// Register a new user\nexport const registerUser = async (username, password) => {\n  const response = await axios.post(`${API_URL}/api/auth/register`, {\n    username,\n    password,\n  });\n  return response.data; // Returns the registration response message\n};\n\n// Login a user\nexport const loginUser = async (username, password) => {\n  const response = await axios.post(`${API_URL}/api/auth/login`, {\n    username,\n    password,\n  });\n  return response.data; // Returns the login response message\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAExE;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOC,MAAM,IAAK;EAC/C,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,GAAGP,OAAO,oBAAoBK,MAAM,EAAE,CAAC;EACxE,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,MAAM,EAAEC,SAAS,KAAK;EAC3D,MAAML,QAAQ,GAAG,MAAMP,KAAK,CAACa,KAAK,CAAC,GAAGZ,OAAO,mBAAmBU,MAAM,SAAS,EAAE;IAC/EG,MAAM,EAAEF;EACV,CAAC,CAAC;EACF,OAAOL,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMM,OAAO,GAAG,MAAAA,CAAOC,WAAW,EAAEV,MAAM,EAAEW,QAAQ,EAAEH,MAAM,GAAG,MAAM,KAAK;EAC/E,MAAMP,QAAQ,GAAG,MAAMP,KAAK,CAACkB,IAAI,CAAC,GAAGjB,OAAO,iBAAiB,EAAE;IAC7De,WAAW;IACXG,OAAO,EAAEb,MAAM;IACfc,SAAS,EAAEH,QAAQ;IACnBH;EACF,CAAC,CAAC;EACF,OAAOP,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMY,YAAY,GAAG,MAAOC,MAAM,IAAK;EAC5C,MAAMf,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,GAAGP,OAAO,oBAAoBqB,MAAM,EAAE,CAAC;EACxE,OAAOf,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMc,cAAc,GAAG,MAAAA,CAAOC,KAAK,EAAEF,MAAM,KAAK;EACrD,MAAMf,QAAQ,GAAG,MAAMP,KAAK,CAACkB,IAAI,CAAC,GAAGjB,OAAO,oBAAoBqB,MAAM,EAAE,EAAE;IACxEE,KAAK;IACLC,OAAO,EAAEH;EACX,CAAC,CAAC;EACF,OAAOf,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMiB,YAAY,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACxD,MAAMrB,QAAQ,GAAG,MAAMP,KAAK,CAACkB,IAAI,CAAC,GAAGjB,OAAO,oBAAoB,EAAE;IAChE0B,QAAQ;IACRC;EACF,CAAC,CAAC;EACF,OAAOrB,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMoB,SAAS,GAAG,MAAAA,CAAOF,QAAQ,EAAEC,QAAQ,KAAK;EACrD,MAAMrB,QAAQ,GAAG,MAAMP,KAAK,CAACkB,IAAI,CAAC,GAAGjB,OAAO,iBAAiB,EAAE;IAC7D0B,QAAQ;IACRC;EACF,CAAC,CAAC;EACF,OAAOrB,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}