{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/components/TaskItem.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useRef } from \"react\";\nimport { ChevronDown, ChevronRight, MoreVertical, X } from \"lucide-react\";\nimport api from \"../services/api\";\nimport { toast } from \"react-toastify\";\nimport \"./TaskItem.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskItem = ({\n  task,\n  onStatusChange,\n  onCreateSubtask,\n  depth,\n  fetchTasks,\n  listId,\n  onMoveTask,\n  onReopenParent\n}) => {\n  _s();\n  const [expanded, setExpanded] = useState(true);\n  const [showMenu, setShowMenu] = useState(false);\n  const [subtasks, setSubtasks] = useState(task.subtasks || []);\n  const [isUpdatingStatus, setIsUpdatingStatus] = useState(false);\n\n  // Use a ref to track if an update is in progress to prevent duplicate calls\n  const updateInProgress = useRef(false);\n  // Use a ref to track if component is mounted\n  const isMounted = useRef(true);\n  const maxDepth = 2; // 0-based index, so this is 3 levels\n  const canHaveChildren = depth < maxDepth;\n  const hasSubtasks = subtasks && subtasks.length > 0;\n  const allSubtasksCompleted = hasSubtasks && subtasks.every(st => st.status === \"Done\");\n\n  // Set isMounted to false when component unmounts\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  // Handle status change with proper debouncing and state tracking\n  const handleStatusChange = useCallback(async () => {\n    // Prevent multiple simultaneous calls\n    if (updateInProgress.current || isUpdatingStatus) return;\n\n    // If task has subtasks and not all are completed, prevent manual completion\n    if (hasSubtasks && !allSubtasksCompleted && task.status !== \"Done\") {\n      toast.error(\"Cannot mark task as done until all subtasks are completed\");\n      return;\n    }\n    updateInProgress.current = true;\n    setIsUpdatingStatus(true);\n    const newStatus = task.status === \"Done\" ? \"Todo\" : \"Done\";\n    try {\n      // Make the API call to update the database\n      await api.patch(`/api/todos/task/${task.id}/status`, {\n        status: newStatus\n      });\n\n      // Only show toast and update state if component is still mounted\n      if (isMounted.current) {\n        toast.success(`Task ${newStatus === \"Done\" ? \"completed\" : \"reopened\"}`);\n\n        // If we're reopening this task and it has a parent, notify the parent to reopen too\n        if (newStatus === \"Todo\" && onReopenParent) {\n          onReopenParent();\n        }\n\n        // Update the parent component's state\n        onStatusChange(task.id, newStatus);\n      }\n    } catch (error) {\n      if (isMounted.current) {\n        toast.error(\"Failed to update task status\");\n        console.error(\"Status update error:\", error);\n      }\n    } finally {\n      if (isMounted.current) {\n        setIsUpdatingStatus(false);\n      }\n      // Add a small delay before allowing new updates\n      setTimeout(() => {\n        updateInProgress.current = false;\n      }, 300);\n    }\n  }, [task.id, task.status, onStatusChange, hasSubtasks, allSubtasksCompleted, isUpdatingStatus, onReopenParent]);\n\n  // Update subtasks state when task changes\n  useEffect(() => {\n    if (isMounted.current) {\n      setSubtasks(task.subtasks || []);\n    }\n  }, [task.subtasks]);\n\n  // Handle auto-completion of parent tasks\n  useEffect(() => {\n    // Only run this effect if:\n    // 1. Task has subtasks\n    // 2. Task is not already marked as Done\n    // 3. All subtasks are completed\n    // 4. We're not currently updating status\n    // 5. Component is still mounted\n    if (isMounted.current && task.subtasks && task.subtasks.length > 0 && task.status !== \"Done\" && task.subtasks.every(st => st.status === \"Done\") && !updateInProgress.current && !isUpdatingStatus) {\n      // Set the flag to prevent duplicate calls\n      updateInProgress.current = true;\n\n      // Call handleStatusChange after a short delay to prevent race conditions\n      const timer = setTimeout(() => {\n        if (isMounted.current) {\n          handleStatusChange();\n        }\n      }, 100);\n\n      // Clean up the timer if the component unmounts\n      return () => clearTimeout(timer);\n    }\n  }, [task.subtasks, task.status, handleStatusChange, isUpdatingStatus]);\n  const handleToggleExpand = () => {\n    setExpanded(!expanded);\n  };\n  const handleSubtaskStatusChange = async (subtaskId, newStatus) => {\n    // Update local state immediately for better UX\n    if (isMounted.current) {\n      setSubtasks(prevSubtasks => prevSubtasks.map(st => st.id === subtaskId ? {\n        ...st,\n        status: newStatus\n      } : st));\n    }\n\n    // If a subtask is being reopened and this task is marked as Done,\n    // we need to reopen this task as well\n    if (newStatus === \"Todo\" && task.status === \"Done\") {\n      // Wait a bit to avoid race conditions\n      setTimeout(() => {\n        if (isMounted.current && !updateInProgress.current) {\n          handleStatusChange();\n        }\n      }, 100);\n    }\n  };\n\n  // This function will be passed to child tasks to notify this task when a child is reopened\n  const handleReopenParent = useCallback(() => {\n    // If this task is marked as Done, reopen it\n    if (task.status === \"Done\" && !updateInProgress.current && !isUpdatingStatus) {\n      handleStatusChange();\n    }\n  }, [task.status, handleStatusChange, isUpdatingStatus]);\n  const handleDeleteTask = async () => {\n    try {\n      await api.delete(`/api/todos/task/${task.id}`);\n      if (isMounted.current) {\n        toast.success(\"Task deleted successfully\");\n        fetchTasks();\n      }\n    } catch (error) {\n      if (isMounted.current) {\n        toast.error(\"Failed to delete task\");\n        console.error(error);\n      }\n    }\n  };\n  const handleMoveTask = () => {\n    onMoveTask(task);\n    setShowMenu(false);\n  };\n  const getStatusClass = status => {\n    switch (status) {\n      case \"Done\":\n        return \"status-done\";\n      case \"In Progress\":\n        return \"status-progress\";\n      default:\n        return \"status-todo\";\n    }\n  };\n\n  // Determine if the checkbox should be disabled\n  const isCheckboxDisabled = isUpdatingStatus || hasSubtasks && !allSubtasksCompleted && task.status !== \"Done\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-item-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `task-item ${task.status === \"Done\" ? \"completed\" : \"\"}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-header\",\n        children: [hasSubtasks ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"expand-button\",\n          onClick: handleToggleExpand,\n          \"aria-label\": expanded ? \"Collapse subtasks\" : \"Expand subtasks\",\n          children: expanded ? /*#__PURE__*/_jsxDEV(ChevronDown, {\n            size: 18\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 27\n          }, this) : /*#__PURE__*/_jsxDEV(ChevronRight, {\n            size: 18\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 55\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"expand-placeholder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `task-checkbox ${task.status === \"Done\" ? \"checked\" : \"\"} ${isUpdatingStatus ? \"updating\" : \"\"}`,\n          onClick: handleStatusChange,\n          disabled: isCheckboxDisabled,\n          \"aria-label\": task.status === \"Done\" ? \"Mark as incomplete\" : \"Mark as complete\",\n          title: isCheckboxDisabled && hasSubtasks ? \"Complete all subtasks first\" : \"\",\n          \"data-task-id\": task.id,\n          children: task.status === \"Done\" && /*#__PURE__*/_jsxDEV(X, {\n            size: 14,\n            className: \"check-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: `task-title ${task.status === \"Done\" ? \"completed\" : \"\"}`,\n            children: task.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this), task.description && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"task-description\",\n            children: task.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 34\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-meta\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: `task-status ${getStatusClass(task.status)}`,\n              children: task.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), hasSubtasks && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"task-subtasks-count\",\n              children: [subtasks.filter(st => st.status === \"Done\").length, \"/\", subtasks.length, \" subtasks\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-actions\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"dropdown-button\",\n              onClick: () => setShowMenu(!showMenu),\n              \"aria-label\": \"Task options\",\n              children: /*#__PURE__*/_jsxDEV(MoreVertical, {\n                size: 18\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this), showMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropdown-menu\",\n              children: [canHaveChildren && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"dropdown-item\",\n                onClick: () => {\n                  onCreateSubtask(task.id, task.title);\n                  setShowMenu(false);\n                },\n                children: \"Add Subtask\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"dropdown-item\",\n                onClick: handleMoveTask,\n                children: \"Move Task\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"dropdown-item delete\",\n                onClick: handleDeleteTask,\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), expanded && hasSubtasks && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"subtasks-container\",\n      children: subtasks.map(subtask => /*#__PURE__*/_jsxDEV(TaskItem, {\n        task: subtask,\n        onStatusChange: handleSubtaskStatusChange,\n        onCreateSubtask: onCreateSubtask,\n        depth: depth + 1,\n        fetchTasks: fetchTasks,\n        listId: listId,\n        onMoveTask: onMoveTask,\n        onReopenParent: handleReopenParent\n      }, subtask.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskItem, \"fta2rl7gU8usDLdvpYiyC6EuX0Q=\");\n_c = TaskItem;\nexport default TaskItem;\nvar _c;\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","useCallback","useRef","ChevronDown","ChevronRight","MoreVertical","X","api","toast","jsxDEV","_jsxDEV","TaskItem","task","onStatusChange","onCreateSubtask","depth","fetchTasks","listId","onMoveTask","onReopenParent","expanded","setExpanded","showMenu","setShowMenu","subtasks","setSubtasks","isUpdatingStatus","setIsUpdatingStatus","updateInProgress","isMounted","maxDepth","canHaveChildren","hasSubtasks","length","allSubtasksCompleted","every","st","status","current","handleStatusChange","error","newStatus","patch","id","success","console","setTimeout","timer","clearTimeout","handleToggleExpand","handleSubtaskStatusChange","subtaskId","prevSubtasks","map","handleReopenParent","handleDeleteTask","delete","handleMoveTask","getStatusClass","isCheckboxDisabled","className","children","onClick","size","fileName","lineNumber","columnNumber","disabled","title","description","filter","subtask","_c","$RefreshReg$"],"sources":["/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/components/TaskItem.js"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect, useCallback, useRef } from \"react\"\nimport { ChevronDown, ChevronRight, MoreVertical, X } from \"lucide-react\"\nimport api from \"../services/api\"\nimport { toast } from \"react-toastify\"\nimport \"./TaskItem.css\"\n\nconst TaskItem = ({ task, onStatusChange, onCreateSubtask, depth, fetchTasks, listId, onMoveTask, onReopenParent }) => {\n  const [expanded, setExpanded] = useState(true)\n  const [showMenu, setShowMenu] = useState(false)\n  const [subtasks, setSubtasks] = useState(task.subtasks || [])\n  const [isUpdatingStatus, setIsUpdatingStatus] = useState(false)\n\n  // Use a ref to track if an update is in progress to prevent duplicate calls\n  const updateInProgress = useRef(false)\n  // Use a ref to track if component is mounted\n  const isMounted = useRef(true)\n\n  const maxDepth = 2 // 0-based index, so this is 3 levels\n  const canHaveChildren = depth < maxDepth\n  const hasSubtasks = subtasks && subtasks.length > 0\n  const allSubtasksCompleted = hasSubtasks && subtasks.every((st) => st.status === \"Done\")\n\n  // Set isMounted to false when component unmounts\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [])\n\n  // Handle status change with proper debouncing and state tracking\n  const handleStatusChange = useCallback(async () => {\n    // Prevent multiple simultaneous calls\n    if (updateInProgress.current || isUpdatingStatus) return\n\n    // If task has subtasks and not all are completed, prevent manual completion\n    if (hasSubtasks && !allSubtasksCompleted && task.status !== \"Done\") {\n      toast.error(\"Cannot mark task as done until all subtasks are completed\")\n      return\n    }\n\n    updateInProgress.current = true\n    setIsUpdatingStatus(true)\n\n    const newStatus = task.status === \"Done\" ? \"Todo\" : \"Done\"\n    try {\n      // Make the API call to update the database\n      await api.patch(`/api/todos/task/${task.id}/status`, { status: newStatus })\n\n      // Only show toast and update state if component is still mounted\n      if (isMounted.current) {\n        toast.success(`Task ${newStatus === \"Done\" ? \"completed\" : \"reopened\"}`)\n\n        // If we're reopening this task and it has a parent, notify the parent to reopen too\n        if (newStatus === \"Todo\" && onReopenParent) {\n          onReopenParent()\n        }\n\n        // Update the parent component's state\n        onStatusChange(task.id, newStatus)\n      }\n    } catch (error) {\n      if (isMounted.current) {\n        toast.error(\"Failed to update task status\")\n        console.error(\"Status update error:\", error)\n      }\n    } finally {\n      if (isMounted.current) {\n        setIsUpdatingStatus(false)\n      }\n      // Add a small delay before allowing new updates\n      setTimeout(() => {\n        updateInProgress.current = false\n      }, 300)\n    }\n  }, [task.id, task.status, onStatusChange, hasSubtasks, allSubtasksCompleted, isUpdatingStatus, onReopenParent])\n\n  // Update subtasks state when task changes\n  useEffect(() => {\n    if (isMounted.current) {\n      setSubtasks(task.subtasks || [])\n    }\n  }, [task.subtasks])\n\n  // Handle auto-completion of parent tasks\n  useEffect(() => {\n    // Only run this effect if:\n    // 1. Task has subtasks\n    // 2. Task is not already marked as Done\n    // 3. All subtasks are completed\n    // 4. We're not currently updating status\n    // 5. Component is still mounted\n    if (\n      isMounted.current &&\n      task.subtasks &&\n      task.subtasks.length > 0 &&\n      task.status !== \"Done\" &&\n      task.subtasks.every((st) => st.status === \"Done\") &&\n      !updateInProgress.current &&\n      !isUpdatingStatus\n    ) {\n      // Set the flag to prevent duplicate calls\n      updateInProgress.current = true\n\n      // Call handleStatusChange after a short delay to prevent race conditions\n      const timer = setTimeout(() => {\n        if (isMounted.current) {\n          handleStatusChange()\n        }\n      }, 100)\n\n      // Clean up the timer if the component unmounts\n      return () => clearTimeout(timer)\n    }\n  }, [task.subtasks, task.status, handleStatusChange, isUpdatingStatus])\n\n  const handleToggleExpand = () => {\n    setExpanded(!expanded)\n  }\n\n  const handleSubtaskStatusChange = async (subtaskId, newStatus) => {\n    // Update local state immediately for better UX\n    if (isMounted.current) {\n      setSubtasks((prevSubtasks) => prevSubtasks.map((st) => (st.id === subtaskId ? { ...st, status: newStatus } : st)))\n    }\n\n    // If a subtask is being reopened and this task is marked as Done,\n    // we need to reopen this task as well\n    if (newStatus === \"Todo\" && task.status === \"Done\") {\n      // Wait a bit to avoid race conditions\n      setTimeout(() => {\n        if (isMounted.current && !updateInProgress.current) {\n          handleStatusChange()\n        }\n      }, 100)\n    }\n  }\n\n  // This function will be passed to child tasks to notify this task when a child is reopened\n  const handleReopenParent = useCallback(() => {\n    // If this task is marked as Done, reopen it\n    if (task.status === \"Done\" && !updateInProgress.current && !isUpdatingStatus) {\n      handleStatusChange()\n    }\n  }, [task.status, handleStatusChange, isUpdatingStatus])\n\n  const handleDeleteTask = async () => {\n    try {\n      await api.delete(`/api/todos/task/${task.id}`)\n      if (isMounted.current) {\n        toast.success(\"Task deleted successfully\")\n        fetchTasks()\n      }\n    } catch (error) {\n      if (isMounted.current) {\n        toast.error(\"Failed to delete task\")\n        console.error(error)\n      }\n    }\n  }\n\n  const handleMoveTask = () => {\n    onMoveTask(task)\n    setShowMenu(false)\n  }\n\n  const getStatusClass = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"status-done\"\n      case \"In Progress\":\n        return \"status-progress\"\n      default:\n        return \"status-todo\"\n    }\n  }\n\n  // Determine if the checkbox should be disabled\n  const isCheckboxDisabled = isUpdatingStatus || (hasSubtasks && !allSubtasksCompleted && task.status !== \"Done\")\n\n  return (\n    <div className=\"task-item-container\">\n      <div className={`task-item ${task.status === \"Done\" ? \"completed\" : \"\"}`}>\n        <div className=\"task-header\">\n          {hasSubtasks ? (\n            <button\n              className=\"expand-button\"\n              onClick={handleToggleExpand}\n              aria-label={expanded ? \"Collapse subtasks\" : \"Expand subtasks\"}\n            >\n              {expanded ? <ChevronDown size={18} /> : <ChevronRight size={18} />}\n            </button>\n          ) : (\n            <div className=\"expand-placeholder\"></div>\n          )}\n\n          <button\n            className={`task-checkbox ${task.status === \"Done\" ? \"checked\" : \"\"} ${isUpdatingStatus ? \"updating\" : \"\"}`}\n            onClick={handleStatusChange}\n            disabled={isCheckboxDisabled}\n            aria-label={task.status === \"Done\" ? \"Mark as incomplete\" : \"Mark as complete\"}\n            title={isCheckboxDisabled && hasSubtasks ? \"Complete all subtasks first\" : \"\"}\n            data-task-id={task.id}\n          >\n            {task.status === \"Done\" && <X size={14} className=\"check-icon\" />}\n          </button>\n\n          <div className=\"task-details\">\n            <h3 className={`task-title ${task.status === \"Done\" ? \"completed\" : \"\"}`}>{task.title}</h3>\n            {task.description && <p className=\"task-description\">{task.description}</p>}\n            <div className=\"task-meta\">\n              <span className={`task-status ${getStatusClass(task.status)}`}>{task.status}</span>\n              {hasSubtasks && (\n                <span className=\"task-subtasks-count\">\n                  {subtasks.filter((st) => st.status === \"Done\").length}/{subtasks.length} subtasks\n                </span>\n              )}\n            </div>\n          </div>\n\n          <div className=\"task-actions\">\n            <div className=\"dropdown\">\n              <button className=\"dropdown-button\" onClick={() => setShowMenu(!showMenu)} aria-label=\"Task options\">\n                <MoreVertical size={18} />\n              </button>\n\n              {showMenu && (\n                <div className=\"dropdown-menu\">\n                  {canHaveChildren && (\n                    <button\n                      className=\"dropdown-item\"\n                      onClick={() => {\n                        onCreateSubtask(task.id, task.title)\n                        setShowMenu(false)\n                      }}\n                    >\n                      Add Subtask\n                    </button>\n                  )}\n                  <button className=\"dropdown-item\" onClick={handleMoveTask}>\n                    Move Task\n                  </button>\n                  <button className=\"dropdown-item delete\" onClick={handleDeleteTask}>\n                    Delete\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {expanded && hasSubtasks && (\n        <div className=\"subtasks-container\">\n          {subtasks.map((subtask) => (\n            <TaskItem\n              key={subtask.id}\n              task={subtask}\n              onStatusChange={handleSubtaskStatusChange}\n              onCreateSubtask={onCreateSubtask}\n              depth={depth + 1}\n              fetchTasks={fetchTasks}\n              listId={listId}\n              onMoveTask={onMoveTask}\n              onReopenParent={handleReopenParent}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default TaskItem;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}