{"ast":null,"code":"var _jsxFileName = \"/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/pages/Dashboard.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getTodoLists, createTodoList, updateTaskStatus, getTasksForList } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [lists, setLists] = useState([]);\n  const [title, setTitle] = useState('');\n  const userId = localStorage.getItem('userId'); // From login\n\n  const fetchLists = async () => {\n    try {\n      if (userId) {\n        const data = await getTodoLists(userId);\n        console.log('getTodoLists returned:', data);\n        setLists(data);\n        setLists(data);\n      }\n    } catch (error) {\n      console.error('Error fetching lists:', error);\n    }\n  };\n  useEffect(() => {\n    fetchLists();\n  }, [userId]);\n  const handleCreateList = async () => {\n    try {\n      await createTodoList(title, userId);\n      setTitle('');\n      fetchLists();\n    } catch (error) {\n      console.error('Error creating list:', error);\n    }\n  };\n  const handleUpdateTaskStatus = async (taskId, newStatus) => {\n    try {\n      await updateTaskStatus(taskId, newStatus);\n      // If you need to refresh tasks for a particular list, \n      // you can call fetchLists() or something similar here.\n    } catch (error) {\n      console.error('Error updating task status:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"New List Title\",\n        value: title,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateList,\n        children: \"Create List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), lists.map(list => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: list.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n        listId: list.id,\n        onUpdateTaskStatus: handleUpdateTaskStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, list.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"ApYHBrsdOPiPpi5IuOP79vipOxk=\");\n_c = Dashboard;\nconst TaskList = ({\n  listId,\n  onUpdateTaskStatus\n}) => {\n  _s2();\n  const [tasks, setTasks] = useState([]);\n  const fetchTasks = async () => {\n    try {\n      const taskData = await getTasksForList(listId); // from api.js\n      setTasks(taskData);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n  useEffect(() => {\n    fetchTasks();\n  }, [listId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: task.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onUpdateTaskStatus(task.id, 'In Progress'),\n        children: \"Move to In Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onUpdateTaskStatus(task.id, 'Done'),\n        children: \"Move to Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, task.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s2(TaskList, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c2 = TaskList;\nexport default Dashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"Dashboard\");\n$RefreshReg$(_c2, \"TaskList\");","map":{"version":3,"names":["React","useState","useEffect","getTodoLists","createTodoList","updateTaskStatus","getTasksForList","jsxDEV","_jsxDEV","Dashboard","_s","lists","setLists","title","setTitle","userId","localStorage","getItem","fetchLists","data","console","log","error","handleCreateList","handleUpdateTaskStatus","taskId","newStatus","style","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","list","TaskList","listId","id","onUpdateTaskStatus","_c","_s2","tasks","setTasks","fetchTasks","taskData","task","description","_c2","$RefreshReg$"],"sources":["/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  getTodoLists, \n  createTodoList, \n  updateTaskStatus, \n  getTasksForList \n} from '../services/api';\n\nconst Dashboard = () => {\n  const [lists, setLists] = useState([]);\n  const [title, setTitle] = useState('');\n  const userId = localStorage.getItem('userId'); // From login\n\n  const fetchLists = async () => {\n    try {\n      if (userId) {\n        const data = await getTodoLists(userId);\n        console.log('getTodoLists returned:', data);\n        setLists(data);\n        setLists(data);\n      }\n    } catch (error) {\n      console.error('Error fetching lists:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchLists();\n  }, [userId]);\n\n  const handleCreateList = async () => {\n    try {\n      await createTodoList(title, userId);\n      setTitle('');\n      fetchLists();\n    } catch (error) {\n      console.error('Error creating list:', error);\n    }\n  };\n\n  const handleUpdateTaskStatus = async (taskId, newStatus) => {\n    try {\n      await updateTaskStatus(taskId, newStatus);\n      // If you need to refresh tasks for a particular list, \n      // you can call fetchLists() or something similar here.\n    } catch (error) {\n      console.error('Error updating task status:', error);\n    }\n  };\n\n  return (\n    <div style={{ margin: '20px' }}>\n      <h2>Dashboard</h2>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"New List Title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n        <button onClick={handleCreateList}>Create List</button>\n      </div>\n      {lists.map((list) => (\n        <div key={list.id}>\n          <h3>{list.title}</h3>\n          <TaskList \n            listId={list.id} \n            onUpdateTaskStatus={handleUpdateTaskStatus} \n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst TaskList = ({ listId, onUpdateTaskStatus }) => {\n  const [tasks, setTasks] = useState([]);\n\n  const fetchTasks = async () => {\n    try {\n      const taskData = await getTasksForList(listId); // from api.js\n      setTasks(taskData);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchTasks();\n  }, [listId]);\n\n  return (\n    <div>\n      {tasks.map((task) => (\n        <div key={task.id}>\n          <p>{task.description}</p>\n          <button onClick={() => onUpdateTaskStatus(task.id, 'In Progress')}>\n            Move to In Progress\n          </button>\n          <button onClick={() => onUpdateTaskStatus(task.id, 'Done')}>\n            Move to Done\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}