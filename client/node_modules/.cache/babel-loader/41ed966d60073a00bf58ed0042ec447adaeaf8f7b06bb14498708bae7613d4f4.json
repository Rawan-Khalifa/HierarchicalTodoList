{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/components/TodoList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport { Plus, Loader } from \"lucide-react\";\nimport TaskItem from \"./TaskItem\";\nimport CreateTaskModal from \"./CreateTaskModal\";\nimport MoveTaskModal from \"./MoveTaskModal\";\nimport api from \"../services/api\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./TodoList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoList = ({\n  list,\n  lists\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showMoveModal, setShowMoveModal] = useState(false);\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [parentTaskId, setParentTaskId] = useState(null);\n  const [parentTaskTitle, setParentTaskTitle] = useState(\"\");\n  const [completedTasksCount, setCompletedTasksCount] = useState(0);\n  const [totalTasksCount, setTotalTasksCount] = useState(0);\n\n  // Memoize fetchTasks to prevent infinite loops\n  const fetchTasks = useCallback(async () => {\n    try {\n      setLoading(true);\n      const response = await api.get(`/api/todos/tasks/${list.id}`);\n\n      // Map backend response to our frontend structure\n      const mappedTasks = response.data.map(task => ({\n        id: task.id,\n        title: task.title,\n        description: task.description || \"\",\n        status: task.status,\n        subtasks: task.subtasks || []\n      }));\n      setTasks(mappedTasks);\n\n      // Calculate task statistics\n      const countTasksAndCompleted = taskList => {\n        let total = 0;\n        let completed = 0;\n        const countRecursive = items => {\n          items.forEach(item => {\n            total++;\n            if (item.status === \"Done\") completed++;\n            if (item.subtasks && item.subtasks.length > 0) {\n              countRecursive(item.subtasks);\n            }\n          });\n        };\n        countRecursive(mappedTasks);\n        return {\n          total,\n          completed\n        };\n      };\n      const {\n        total,\n        completed\n      } = countTasksAndCompleted(mappedTasks);\n      setTotalTasksCount(total);\n      setCompletedTasksCount(completed);\n    } catch (error) {\n      console.error(\"Failed to fetch tasks:\", error);\n      toast.error(\"Failed to load tasks\");\n    } finally {\n      setLoading(false);\n    }\n  }, [list.id]);\n  useEffect(() => {\n    if (list && list.id) {\n      fetchTasks();\n    }\n  }, [list, fetchTasks]);\n  const handleCreateTask = async taskData => {\n    try {\n      const payload = {\n        title: taskData.title,\n        description: taskData.description || \"\",\n        status: \"Todo\",\n        list_id: list.id,\n        parent_id: parentTaskId\n      };\n      await api.post(\"/api/todos/task\", payload);\n      toast.success(`${parentTaskId ? \"Subtask\" : \"Task\"} created successfully`);\n      fetchTasks();\n      return true;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(\"Failed to create task:\", error);\n      toast.error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || \"Failed to create task\");\n      throw error;\n    }\n  };\n  const handleStatusChange = (taskId, newStatus) => {\n    // Update the task status in the local state\n    const updateTaskStatus = taskList => {\n      return taskList.map(task => {\n        if (task.id === taskId) {\n          return {\n            ...task,\n            status: newStatus\n          };\n        }\n        if (task.subtasks && task.subtasks.length > 0) {\n          const updatedSubtasks = updateTaskStatus(task.subtasks);\n\n          // Check if all subtasks are now completed and update parent status if needed\n          const allSubtasksDone = updatedSubtasks.every(st => st.status === \"Done\");\n          if (allSubtasksDone && task.status !== \"Done\" && newStatus === \"Done\") {\n            return {\n              ...task,\n              subtasks: updatedSubtasks,\n              status: \"Done\"\n            };\n          }\n          return {\n            ...task,\n            subtasks: updatedSubtasks\n          };\n        }\n        return task;\n      });\n    };\n    const updatedTasks = updateTaskStatus(tasks);\n    setTasks(updatedTasks);\n\n    // Recalculate task statistics\n    const countTasksAndCompleted = taskList => {\n      let total = 0;\n      let completed = 0;\n      const countRecursive = items => {\n        items.forEach(item => {\n          total++;\n          if (item.status === \"Done\") completed++;\n          if (item.subtasks && item.subtasks.length > 0) {\n            countRecursive(item.subtasks);\n          }\n        });\n      };\n      countRecursive(updatedTasks);\n      return {\n        total,\n        completed\n      };\n    };\n    const {\n      total,\n      completed\n    } = countTasksAndCompleted(updatedTasks);\n    setTotalTasksCount(total);\n    setCompletedTasksCount(completed);\n  };\n  const handleCreateSubtask = (parentId, parentTitle) => {\n    setParentTaskId(parentId);\n    setParentTaskTitle(parentTitle);\n    setShowCreateModal(true);\n  };\n  const handleMoveTask = task => {\n    setSelectedTask(task);\n    setShowMoveModal(true);\n  };\n  const getMotivationalQuote = () => {\n    const quotes = [\"The secret of getting ahead is getting started.\", \"Don't wait. The time will never be just right.\", \"Start where you are. Use what you have. Do what you can.\", \"The beginning is always the hardest. Keep going!\", \"Small progress is still progress.\"];\n    return quotes[Math.floor(Math.random() * quotes.length)];\n  };\n  const calculateProgress = () => {\n    if (totalTasksCount === 0) return 0;\n    return completedTasksCount / totalTasksCount * 100;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-list-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"todo-list-title\",\n        children: list.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button primary\",\n        onClick: () => {\n          setParentTaskId(null);\n          setParentTaskTitle(\"\");\n          setShowCreateModal(true);\n        },\n        children: [/*#__PURE__*/_jsxDEV(Plus, {\n          size: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), totalTasksCount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [completedTasksCount, \" of \", totalTasksCount, \" tasks completed\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [Math.round(calculateProgress()), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar-fill\",\n          style: {\n            width: `${calculateProgress()}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }, this) : tasks.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty-tasks\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No tasks yet. Create your first task to get started!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button primary\",\n        onClick: () => {\n          setParentTaskId(null);\n          setParentTaskTitle(\"\");\n          setShowCreateModal(true);\n        },\n        children: [/*#__PURE__*/_jsxDEV(Plus, {\n          size: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Create Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"motivational-quote\",\n        children: getMotivationalQuote()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tasks-container\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n        task: task,\n        onStatusChange: handleStatusChange,\n        onCreateSubtask: handleCreateSubtask,\n        depth: 0,\n        fetchTasks: fetchTasks,\n        listId: list.id,\n        onMoveTask: handleMoveTask\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CreateTaskModal, {\n      isOpen: showCreateModal,\n      onClose: () => {\n        setShowCreateModal(false);\n        setParentTaskId(null);\n        setParentTaskTitle(\"\");\n      },\n      onCreate: handleCreateTask,\n      isSubtask: !!parentTaskId,\n      parentTaskTitle: parentTaskTitle,\n      listId: list.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), selectedTask && /*#__PURE__*/_jsxDEV(MoveTaskModal, {\n      isOpen: showMoveModal,\n      onClose: () => {\n        setShowMoveModal(false);\n        setSelectedTask(null);\n      },\n      lists: lists,\n      currentListId: list.id,\n      taskTitle: selectedTask.title,\n      task: selectedTask,\n      fetchTasks: fetchTasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"bottom-right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoList, \"vsxxpjA+MgzHo7UUy91dqAnL1YM=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","useCallback","Plus","Loader","TaskItem","CreateTaskModal","MoveTaskModal","api","toast","ToastContainer","jsxDEV","_jsxDEV","TodoList","list","lists","tasks","setTasks","loading","setLoading","showCreateModal","setShowCreateModal","showMoveModal","setShowMoveModal","selectedTask","setSelectedTask","parentTaskId","setParentTaskId","parentTaskTitle","setParentTaskTitle","completedTasksCount","setCompletedTasksCount","totalTasksCount","setTotalTasksCount","fetchTasks","response","get","id","mappedTasks","data","map","task","title","description","status","subtasks","countTasksAndCompleted","taskList","total","completed","countRecursive","items","forEach","item","length","error","console","handleCreateTask","taskData","payload","list_id","parent_id","post","success","_error$response","_error$response$data","handleStatusChange","taskId","newStatus","updateTaskStatus","updatedSubtasks","allSubtasksDone","every","st","updatedTasks","handleCreateSubtask","parentId","parentTitle","handleMoveTask","getMotivationalQuote","quotes","Math","floor","random","calculateProgress","className","children","fileName","lineNumber","columnNumber","onClick","size","round","style","width","onStatusChange","onCreateSubtask","depth","listId","onMoveTask","isOpen","onClose","onCreate","isSubtask","currentListId","taskTitle","position","_c","$RefreshReg$"],"sources":["/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/components/TodoList.js"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect, useCallback } from \"react\"\nimport { Plus, Loader } from \"lucide-react\"\nimport TaskItem from \"./TaskItem\"\nimport CreateTaskModal from \"./CreateTaskModal\"\nimport MoveTaskModal from \"./MoveTaskModal\"\nimport api from \"../services/api\"\nimport { toast, ToastContainer } from \"react-toastify\"\nimport \"react-toastify/dist/ReactToastify.css\"\nimport \"./TodoList.css\"\n\nconst TodoList = ({ list, lists }) => {\n  const [tasks, setTasks] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [showCreateModal, setShowCreateModal] = useState(false)\n  const [showMoveModal, setShowMoveModal] = useState(false)\n  const [selectedTask, setSelectedTask] = useState(null)\n  const [parentTaskId, setParentTaskId] = useState(null)\n  const [parentTaskTitle, setParentTaskTitle] = useState(\"\")\n  const [completedTasksCount, setCompletedTasksCount] = useState(0)\n  const [totalTasksCount, setTotalTasksCount] = useState(0)\n\n  // Memoize fetchTasks to prevent infinite loops\n  const fetchTasks = useCallback(async () => {\n    try {\n      setLoading(true)\n      const response = await api.get(`/api/todos/tasks/${list.id}`)\n\n      // Map backend response to our frontend structure\n      const mappedTasks = response.data.map((task) => ({\n        id: task.id,\n        title: task.title,\n        description: task.description || \"\",\n        status: task.status,\n        subtasks: task.subtasks || [],\n      }))\n\n      setTasks(mappedTasks)\n\n      // Calculate task statistics\n      const countTasksAndCompleted = (taskList) => {\n        let total = 0\n        let completed = 0\n\n        const countRecursive = (items) => {\n          items.forEach((item) => {\n            total++\n            if (item.status === \"Done\") completed++\n\n            if (item.subtasks && item.subtasks.length > 0) {\n              countRecursive(item.subtasks)\n            }\n          })\n        }\n\n        countRecursive(mappedTasks)\n        return { total, completed }\n      }\n\n      const { total, completed } = countTasksAndCompleted(mappedTasks)\n      setTotalTasksCount(total)\n      setCompletedTasksCount(completed)\n    } catch (error) {\n      console.error(\"Failed to fetch tasks:\", error)\n      toast.error(\"Failed to load tasks\")\n    } finally {\n      setLoading(false)\n    }\n  }, [list.id])\n\n  useEffect(() => {\n    if (list && list.id) {\n      fetchTasks()\n    }\n  }, [list, fetchTasks])\n\n  const handleCreateTask = async (taskData) => {\n    try {\n      const payload = {\n        title: taskData.title,\n        description: taskData.description || \"\",\n        status: \"Todo\",\n        list_id: list.id,\n        parent_id: parentTaskId,\n      }\n\n      await api.post(\"/api/todos/task\", payload)\n      toast.success(`${parentTaskId ? \"Subtask\" : \"Task\"} created successfully`)\n      fetchTasks()\n      return true\n    } catch (error) {\n      console.error(\"Failed to create task:\", error)\n      toast.error(error.response?.data?.error || \"Failed to create task\")\n      throw error\n    }\n  }\n\n  const handleStatusChange = (taskId, newStatus) => {\n    // Update the task status in the local state\n    const updateTaskStatus = (taskList) => {\n      return taskList.map((task) => {\n        if (task.id === taskId) {\n          return { ...task, status: newStatus }\n        }\n\n        if (task.subtasks && task.subtasks.length > 0) {\n          const updatedSubtasks = updateTaskStatus(task.subtasks)\n\n          // Check if all subtasks are now completed and update parent status if needed\n          const allSubtasksDone = updatedSubtasks.every((st) => st.status === \"Done\")\n          if (allSubtasksDone && task.status !== \"Done\" && newStatus === \"Done\") {\n            return {\n              ...task,\n              subtasks: updatedSubtasks,\n              status: \"Done\",\n            }\n          }\n\n          return {\n            ...task,\n            subtasks: updatedSubtasks,\n          }\n        }\n\n        return task\n      })\n    }\n\n    const updatedTasks = updateTaskStatus(tasks)\n    setTasks(updatedTasks)\n\n    // Recalculate task statistics\n    const countTasksAndCompleted = (taskList) => {\n      let total = 0\n      let completed = 0\n\n      const countRecursive = (items) => {\n        items.forEach((item) => {\n          total++\n          if (item.status === \"Done\") completed++\n\n          if (item.subtasks && item.subtasks.length > 0) {\n            countRecursive(item.subtasks)\n          }\n        })\n      }\n\n      countRecursive(updatedTasks)\n      return { total, completed }\n    }\n\n    const { total, completed } = countTasksAndCompleted(updatedTasks)\n    setTotalTasksCount(total)\n    setCompletedTasksCount(completed)\n  }\n\n  const handleCreateSubtask = (parentId, parentTitle) => {\n    setParentTaskId(parentId)\n    setParentTaskTitle(parentTitle)\n    setShowCreateModal(true)\n  }\n\n  const handleMoveTask = (task) => {\n    setSelectedTask(task)\n    setShowMoveModal(true)\n  }\n\n  const getMotivationalQuote = () => {\n    const quotes = [\n      \"The secret of getting ahead is getting started.\",\n      \"Don't wait. The time will never be just right.\",\n      \"Start where you are. Use what you have. Do what you can.\",\n      \"The beginning is always the hardest. Keep going!\",\n      \"Small progress is still progress.\",\n    ]\n\n    return quotes[Math.floor(Math.random() * quotes.length)]\n  }\n\n  const calculateProgress = () => {\n    if (totalTasksCount === 0) return 0\n    return (completedTasksCount / totalTasksCount) * 100\n  }\n\n  return (\n    <div className=\"todo-list\">\n      <div className=\"todo-list-header\">\n        <h2 className=\"todo-list-title\">{list.title}</h2>\n        <button\n          className=\"button primary\"\n          onClick={() => {\n            setParentTaskId(null)\n            setParentTaskTitle(\"\")\n            setShowCreateModal(true)\n          }}\n        >\n          <Plus size={16} />\n          <span>Add Task</span>\n        </button>\n      </div>\n\n      {totalTasksCount > 0 && (\n        <div className=\"progress-container\">\n          <div className=\"progress-info\">\n            <span>\n              {completedTasksCount} of {totalTasksCount} tasks completed\n            </span>\n            <span>{Math.round(calculateProgress())}%</span>\n          </div>\n          <div className=\"progress-bar-container\">\n            <div className=\"progress-bar-fill\" style={{ width: `${calculateProgress()}%` }}></div>\n          </div>\n        </div>\n      )}\n\n      {loading ? (\n        <div className=\"loading-container\">\n          <Loader className=\"loading-spinner\" />\n        </div>\n      ) : tasks.length === 0 ? (\n        <div className=\"empty-tasks\">\n          <p>No tasks yet. Create your first task to get started!</p>\n          <button\n            className=\"button primary\"\n            onClick={() => {\n              setParentTaskId(null)\n              setParentTaskTitle(\"\")\n              setShowCreateModal(true)\n            }}\n          >\n            <Plus size={16} />\n            <span>Create Task</span>\n          </button>\n          <p className=\"motivational-quote\">{getMotivationalQuote()}</p>\n        </div>\n      ) : (\n        <div className=\"tasks-container\">\n          {tasks.map((task) => (\n            <TaskItem\n              key={task.id}\n              task={task}\n              onStatusChange={handleStatusChange}\n              onCreateSubtask={handleCreateSubtask}\n              depth={0}\n              fetchTasks={fetchTasks}\n              listId={list.id}\n              onMoveTask={handleMoveTask}\n            />\n          ))}\n        </div>\n      )}\n\n      <CreateTaskModal\n        isOpen={showCreateModal}\n        onClose={() => {\n          setShowCreateModal(false)\n          setParentTaskId(null)\n          setParentTaskTitle(\"\")\n        }}\n        onCreate={handleCreateTask}\n        isSubtask={!!parentTaskId}\n        parentTaskTitle={parentTaskTitle}\n        listId={list.id}\n      />\n\n      {selectedTask && (\n        <MoveTaskModal\n          isOpen={showMoveModal}\n          onClose={() => {\n            setShowMoveModal(false)\n            setSelectedTask(null)\n          }}\n          lists={lists}\n          currentListId={list.id}\n          taskTitle={selectedTask.title}\n          task={selectedTask}\n          fetchTasks={fetchTasks}\n        />\n      )}\n\n      <ToastContainer position=\"bottom-right\" />\n    </div>\n  )\n}\n\nexport default TodoList\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}