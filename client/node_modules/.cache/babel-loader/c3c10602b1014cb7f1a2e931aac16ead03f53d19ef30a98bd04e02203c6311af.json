{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\n\n// Ensure axios always sends cookies with requests\naxios.defaults.withCredentials = true;\n\n// Use .env or default localhost\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Set up an interceptor to handle 401 responses\naxios.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    // Automatically redirect to login page\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n/**\n * Create a new TodoList for the current user\n * POST /api/todos/list\n * Body: { title }\n */\nexport const createTodoList = async title => {\n  const response = await axios.post(`${API_URL}/api/todos/list`, {\n    title\n  }, {\n    withCredentials: true\n  });\n  return response.data;\n};\n\n/**\n * Get all TodoLists for the current user\n * GET /api/todos/lists\n */\nexport const getTodoLists = async () => {\n  const response = await axios.get(`${API_URL}/api/todos/lists`, {\n    withCredentials: true\n  });\n  return response.data; // array of {id, title}\n};\n\n/**\n * Create a new Task or subtask\n * POST /api/todos/task\n * Body: { title, description, status, list_id, parent_id }\n */\nexport const addTask = async (title, description, status, listId, parentId) => {\n  const response = await axios.post(`${API_URL}/api/todos/task`, {\n    title,\n    description,\n    status,\n    list_id: listId,\n    parent_id: parentId\n  }, {\n    withCredentials: true\n  });\n  return response.data;\n};\n\n/**\n * Get tasks (with subtasks) for a given list\n * GET /api/todos/tasks/<list_id>\n */\nexport const getTasksForList = async listId => {\n  const response = await axios.get(`${API_URL}/api/todos/tasks/${listId}`, {\n    withCredentials: true\n  });\n  return response.data; // top-level tasks + nested subtasks\n};\n\n/**\n * Update task status\n * PATCH /api/todos/task/<task_id>/status\n * Body: { status: \"Todo|In Progress|Done\" }\n */\nexport const updateTaskStatus = async (taskId, newStatus) => {\n  const response = await axios.patch(`${API_URL}/api/todos/task/${taskId}/status`, {\n    status: newStatus\n  }, {\n    withCredentials: true\n  });\n  return response.data;\n};\n\n/**\n * Log in a user.\n * POST /api/auth/login\n * Body: { username, password }\n */\nexport const loginUser = async (username, password) => {\n  const response = await axios.post(`${API_URL}/api/auth/login`, {\n    username,\n    password\n  }, {\n    withCredentials: true\n  });\n  return response.data;\n};\n\n/**\n * Register a new user.\n * POST /api/auth/register\n * Body: { username, password }\n */\nexport const registerUser = async (username, password) => {\n  const response = await axios.post(`${API_URL}/api/auth/register`, {\n    username,\n    password\n  }, {\n    withCredentials: true\n  });\n  return response.data;\n};\n\n// --- Add a logout function here ---\nexport const logoutUser = async () => {\n  const response = await axios.post(`${API_URL}/api/auth/logout`, {}, {\n    withCredentials: true\n  });\n  return response.data;\n};","map":{"version":3,"names":["axios","defaults","withCredentials","API_URL","process","env","REACT_APP_API_URL","interceptors","response","use","error","status","window","location","href","Promise","reject","createTodoList","title","post","data","getTodoLists","get","addTask","description","listId","parentId","list_id","parent_id","getTasksForList","updateTaskStatus","taskId","newStatus","patch","loginUser","username","password","registerUser","logoutUser"],"sources":["/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/services/api.js"],"sourcesContent":["// src/services/api.js\nimport axios from 'axios';\n\n// Ensure axios always sends cookies with requests\naxios.defaults.withCredentials = true;\n\n// Use .env or default localhost\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Set up an interceptor to handle 401 responses\naxios.interceptors.response.use(\n    response => response,\n    error => {\n      if (error.response && error.response.status === 401) {\n        // Automatically redirect to login page\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    }\n  );\n  \n\n/**\n * Create a new TodoList for the current user\n * POST /api/todos/list\n * Body: { title }\n */\nexport const createTodoList = async (title) => {\n  const response = await axios.post(`${API_URL}/api/todos/list`, { title }, {\n    withCredentials: true\n  });\n  return response.data;\n};\n\n/**\n * Get all TodoLists for the current user\n * GET /api/todos/lists\n */\nexport const getTodoLists = async () => {\n  const response = await axios.get(`${API_URL}/api/todos/lists`, {\n    withCredentials: true\n  });\n  return response.data; // array of {id, title}\n};\n\n/**\n * Create a new Task or subtask\n * POST /api/todos/task\n * Body: { title, description, status, list_id, parent_id }\n */\nexport const addTask = async (title, description, status, listId, parentId) => {\n  const response = await axios.post(`${API_URL}/api/todos/task`, {\n    title,\n    description,\n    status,\n    list_id: listId,\n    parent_id: parentId,\n  }, {\n    withCredentials: true\n  });\n  return response.data;\n};\n\n/**\n * Get tasks (with subtasks) for a given list\n * GET /api/todos/tasks/<list_id>\n */\nexport const getTasksForList = async (listId) => {\n  const response = await axios.get(`${API_URL}/api/todos/tasks/${listId}`, {\n    withCredentials: true\n  });\n  return response.data; // top-level tasks + nested subtasks\n};\n\n/**\n * Update task status\n * PATCH /api/todos/task/<task_id>/status\n * Body: { status: \"Todo|In Progress|Done\" }\n */\nexport const updateTaskStatus = async (taskId, newStatus) => {\n  const response = await axios.patch(`${API_URL}/api/todos/task/${taskId}/status`, {\n    status: newStatus,\n  }, {\n    withCredentials: true\n  });\n  return response.data;\n};\n\n/**\n * Log in a user.\n * POST /api/auth/login\n * Body: { username, password }\n */\nexport const loginUser = async (username, password) => {\n  const response = await axios.post(`${API_URL}/api/auth/login`, {\n    username,\n    password,\n  }, {\n    withCredentials: true\n  });\n  return response.data;\n};\n\n/**\n * Register a new user.\n * POST /api/auth/register\n * Body: { username, password }\n */\nexport const registerUser = async (username, password) => {\n  const response = await axios.post(`${API_URL}/api/auth/register`, {\n    username,\n    password,\n  }, {\n    withCredentials: true\n  });\n  return response.data;\n};\n\n\n// --- Add a logout function here ---\nexport const logoutUser = async () => {\n    const response = await axios.post(`${API_URL}/api/auth/logout`, {}, {\n      withCredentials: true\n    });\n    return response.data;\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}