{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/components/TaskItem.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useRef } from \"react\";\nimport { ChevronDown, ChevronRight, MoreVertical, Check, AlertCircle, ArrowUpDown } from \"lucide-react\";\nimport api from \"../services/api\";\nimport { toast } from \"react-toastify\";\nimport \"./TaskItem.css\";\n\n// Create a separate component for the error state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskItemError = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"task-item-error\",\n  children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n    size: 16,\n    className: \"error-icon\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"Invalid task data\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 3\n}, this);\n_c = TaskItemError;\nconst TaskItem = ({\n  task,\n  onStatusChange,\n  onCreateSubtask,\n  depth = 0,\n  fetchTasks,\n  listId,\n  onMoveTask,\n  onReopenParent\n}) => {\n  _s();\n  // All hooks must be called at the top level, before any conditional logic\n  const [expanded, setExpanded] = useState(true);\n  const [showMenu, setShowMenu] = useState(false);\n  const [subtasks, setSubtasks] = useState([]);\n  const [isUpdatingStatus, setIsUpdatingStatus] = useState(false);\n\n  // Use a ref to track if an update is in progress to prevent duplicate calls\n  const updateInProgress = useRef(false);\n  // Use a ref to track if component is mounted\n  const isMounted = useRef(true);\n  // Use a ref for the dropdown menu to handle clicks outside\n  const menuRef = useRef(null);\n\n  // Check if task is valid - but don't return early!\n  const isTaskValid = task && task.id;\n\n  // Set isMounted to false when component unmounts\n  useEffect(() => {\n    isMounted.current = true;\n\n    // Add click event listener to close dropdown when clicking outside\n    const handleClickOutside = event => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setShowMenu(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      isMounted.current = false;\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  // Update subtasks state when task changes\n  useEffect(() => {\n    if (isMounted.current && isTaskValid && task.subtasks) {\n      setSubtasks(task.subtasks || []);\n    }\n  }, [isTaskValid, task === null || task === void 0 ? void 0 : task.subtasks]);\n\n  // These variables are only used if the task is valid\n  const maxDepth = 2; // 0-based index, so this is 3 levels\n  const canHaveChildren = isTaskValid && depth < maxDepth;\n  const hasSubtasks = isTaskValid && subtasks && subtasks.length > 0;\n  const allSubtasksCompleted = hasSubtasks && subtasks.every(st => st.status === \"Done\");\n\n  // Handle status change with proper debouncing and state tracking\n  const handleStatusChange = useCallback(async () => {\n    if (!isTaskValid) return;\n\n    // Prevent multiple simultaneous calls\n    if (updateInProgress.current || isUpdatingStatus) return;\n\n    // If task has subtasks and not all are completed, prevent manual completion\n    if (hasSubtasks && !allSubtasksCompleted && task.status !== \"Done\") {\n      toast.error(\"Complete all subtasks before marking this task as done\", {\n        position: \"bottom-center\",\n        autoClose: 3000\n      });\n      return;\n    }\n    updateInProgress.current = true;\n    setIsUpdatingStatus(true);\n    const newStatus = task.status === \"Done\" ? \"Todo\" : \"Done\";\n    try {\n      // Make the API call to update the database\n      const response = await api.patch(`/api/todos/task/${task.id}/status`, {\n        status: newStatus\n      });\n\n      // Only show toast and update state if component is still mounted\n      if (isMounted.current) {\n        toast.success(`Task ${newStatus === \"Done\" ? \"completed\" : \"reopened\"}`);\n\n        // If we're reopening this task and it has a parent, notify the parent to reopen too\n        if (newStatus === \"Todo\" && onReopenParent) {\n          onReopenParent();\n        }\n\n        // Update the parent component's state\n        onStatusChange(task.id, newStatus);\n\n        // If we're marking a task as Todo and it has subtasks that are Done,\n        // ask the user if they want to reopen all subtasks as well\n        if (newStatus === \"Todo\" && hasSubtasks && allSubtasksCompleted) {\n          const shouldReopenSubtasks = window.confirm(\"Do you want to reopen all subtasks as well?\");\n          if (shouldReopenSubtasks) {\n            reopenAllSubtasks(subtasks);\n          }\n        }\n      }\n    } catch (error) {\n      if (isMounted.current) {\n        toast.error(\"Failed to update task status\");\n        console.error(\"Status update error:\", error);\n      }\n    } finally {\n      if (isMounted.current) {\n        setIsUpdatingStatus(false);\n      }\n      // Add a small delay before allowing new updates\n      setTimeout(() => {\n        updateInProgress.current = false;\n      }, 300);\n    }\n  }, [isTaskValid, task === null || task === void 0 ? void 0 : task.id, task === null || task === void 0 ? void 0 : task.status, onStatusChange, hasSubtasks, allSubtasksCompleted, isUpdatingStatus, onReopenParent, subtasks]);\n\n  // Recursive function to reopen all subtasks\n  const reopenAllSubtasks = async tasks => {\n    for (const subtask of tasks) {\n      try {\n        await api.patch(`/api/todos/task/${subtask.id}/status`, {\n          status: \"Todo\"\n        });\n\n        // Update local state\n        if (isMounted.current) {\n          onStatusChange(subtask.id, \"Todo\");\n        }\n\n        // Recursively reopen nested subtasks\n        if (subtask.subtasks && subtask.subtasks.length > 0) {\n          await reopenAllSubtasks(subtask.subtasks);\n        }\n      } catch (error) {\n        console.error(`Failed to reopen subtask ${subtask.id}:`, error);\n      }\n    }\n  };\n\n  // Handle auto-completion of parent tasks\n  useEffect(() => {\n    let timer;\n\n    // Only proceed if task is valid\n    if (!isTaskValid) return () => {};\n\n    // Only run this effect if:\n    // 1. Task has subtasks\n    // 2. Task is not already marked as Done\n    // 3. All subtasks are completed\n    // 4. We're not currently updating status\n    // 5. Component is still mounted\n    if (task.subtasks && task.subtasks.length > 0 && task.status !== \"Done\" && task.subtasks.every(st => st.status === \"Done\") && !updateInProgress.current && !isUpdatingStatus && isMounted.current) {\n      // Set the flag to prevent duplicate calls\n      updateInProgress.current = true;\n\n      // Call handleStatusChange after a short delay to prevent race conditions\n      timer = setTimeout(() => {\n        if (isMounted.current) {\n          handleStatusChange();\n        }\n      }, 100);\n    }\n\n    // Clean up the timer if the component unmounts or dependencies change\n    return () => {\n      if (timer) clearTimeout(timer);\n    };\n  }, [isTaskValid, task === null || task === void 0 ? void 0 : task.subtasks, task === null || task === void 0 ? void 0 : task.status, handleStatusChange, isUpdatingStatus]);\n  const handleToggleExpand = () => {\n    setExpanded(!expanded);\n  };\n  const handleSubtaskStatusChange = async (subtaskId, newStatus) => {\n    if (!isTaskValid) return;\n\n    // Update local state immediately for better UX\n    if (isMounted.current) {\n      setSubtasks(prevSubtasks => prevSubtasks.map(st => st.id === subtaskId ? {\n        ...st,\n        status: newStatus\n      } : st));\n    }\n\n    // If a subtask is being reopened and this task is marked as Done,\n    // we need to reopen this task as well\n    if (newStatus === \"Todo\" && task.status === \"Done\") {\n      // Wait a bit to avoid race conditions\n      setTimeout(() => {\n        if (isMounted.current && !updateInProgress.current) {\n          handleStatusChange();\n        }\n      }, 100);\n    }\n  };\n\n  // This function will be passed to child tasks to notify this task when a child is reopened\n  const handleReopenParent = useCallback(() => {\n    if (!isTaskValid) return;\n\n    // If this task is marked as Done, reopen it\n    if (task.status === \"Done\" && !updateInProgress.current && !isUpdatingStatus) {\n      handleStatusChange();\n    }\n  }, [isTaskValid, task === null || task === void 0 ? void 0 : task.status, handleStatusChange, isUpdatingStatus]);\n  const handleDeleteTask = async () => {\n    if (!isTaskValid) return;\n\n    // Confirm before deleting\n    if (!window.confirm(`Are you sure you want to delete \"${task.title}\"? This cannot be undone.`)) {\n      return;\n    }\n    try {\n      await api.delete(`/api/todos/task/${task.id}`);\n      if (isMounted.current) {\n        toast.success(\"Task deleted successfully\");\n        fetchTasks();\n      }\n    } catch (error) {\n      if (isMounted.current) {\n        toast.error(\"Failed to delete task\");\n        console.error(error);\n      }\n    }\n  };\n  const handleMoveTask = () => {\n    if (!isTaskValid) return;\n    onMoveTask(task);\n    setShowMenu(false);\n  };\n  const getStatusClass = status => {\n    switch (status) {\n      case \"Done\":\n        return \"status-done\";\n      case \"In Progress\":\n        return \"status-progress\";\n      default:\n        return \"status-todo\";\n    }\n  };\n\n  // If task is not valid, render the error component\n  if (!isTaskValid) {\n    console.error(\"Invalid task object:\", task);\n    return /*#__PURE__*/_jsxDEV(TaskItemError, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Determine if the checkbox should be disabled\n  const isCheckboxDisabled = isUpdatingStatus || hasSubtasks && !allSubtasksCompleted && task.status !== \"Done\";\n\n  // Only render the full component if task is valid\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-item-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `task-item ${task.status === \"Done\" ? \"completed\" : \"\"}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-header\",\n        children: [hasSubtasks ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"expand-button\",\n          onClick: handleToggleExpand,\n          \"aria-label\": expanded ? \"Collapse subtasks\" : \"Expand subtasks\",\n          children: expanded ? /*#__PURE__*/_jsxDEV(ChevronDown, {\n            size: 18\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 27\n          }, this) : /*#__PURE__*/_jsxDEV(ChevronRight, {\n            size: 18\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 55\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"expand-placeholder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `task-checkbox ${task.status === \"Done\" ? \"checked\" : \"\"} ${isUpdatingStatus ? \"updating\" : \"\"}`,\n          onClick: handleStatusChange,\n          disabled: isCheckboxDisabled,\n          \"aria-label\": task.status === \"Done\" ? \"Mark as incomplete\" : \"Mark as complete\",\n          title: isCheckboxDisabled && hasSubtasks ? \"Complete all subtasks first\" : \"\",\n          \"data-task-id\": task.id,\n          children: task.status === \"Done\" && /*#__PURE__*/_jsxDEV(Check, {\n            size: 14,\n            className: \"check-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: `task-title ${task.status === \"Done\" ? \"completed\" : \"\"}`,\n            children: task.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 13\n          }, this), task.description && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"task-description\",\n            children: task.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 34\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-meta\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: `task-status ${getStatusClass(task.status)}`,\n              children: task.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 15\n            }, this), hasSubtasks && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"task-subtasks-count\",\n              children: [subtasks.filter(st => st.status === \"Done\").length, \"/\", subtasks.length, \" subtasks\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"task-level-indicator\",\n              children: [\"Level: \", depth + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-actions\",\n          ref: menuRef,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"move-task-button\",\n            onClick: handleMoveTask,\n            \"aria-label\": \"Move task\",\n            title: \"Move this task\",\n            children: /*#__PURE__*/_jsxDEV(ArrowUpDown, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"dropdown-button\",\n              onClick: () => setShowMenu(!showMenu),\n              \"aria-label\": \"Task options\",\n              \"aria-expanded\": showMenu,\n              \"aria-haspopup\": \"true\",\n              children: /*#__PURE__*/_jsxDEV(MoreVertical, {\n                size: 18\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 15\n            }, this), showMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropdown-menu\",\n              role: \"menu\",\n              children: [canHaveChildren && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"dropdown-item\",\n                onClick: () => {\n                  onCreateSubtask(task.id, task.title);\n                  setShowMenu(false);\n                },\n                role: \"menuitem\",\n                children: \"Add Subtask\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"dropdown-item\",\n                onClick: handleMoveTask,\n                role: \"menuitem\",\n                children: \"Move Task\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"dropdown-item delete\",\n                onClick: handleDeleteTask,\n                role: \"menuitem\",\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), expanded && hasSubtasks && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"subtasks-container\",\n      children: subtasks.map(subtask => /*#__PURE__*/_jsxDEV(TaskItem, {\n        task: subtask,\n        onStatusChange: handleSubtaskStatusChange,\n        onCreateSubtask: onCreateSubtask,\n        depth: depth + 1,\n        fetchTasks: fetchTasks,\n        listId: listId,\n        onMoveTask: onMoveTask,\n        onReopenParent: handleReopenParent\n      }, subtask.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskItem, \"ob1VAK3k40FS6onULvTerAMTT5Y=\");\n_c2 = TaskItem;\nexport default TaskItem;\nvar _c, _c2;\n$RefreshReg$(_c, \"TaskItemError\");\n$RefreshReg$(_c2, \"TaskItem\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","useCallback","useRef","ChevronDown","ChevronRight","MoreVertical","Check","AlertCircle","ArrowUpDown","api","toast","jsxDEV","_jsxDEV","TaskItemError","className","children","size","fileName","lineNumber","columnNumber","_c","TaskItem","task","onStatusChange","onCreateSubtask","depth","fetchTasks","listId","onMoveTask","onReopenParent","expanded","setExpanded","showMenu","setShowMenu","subtasks","setSubtasks","isUpdatingStatus","setIsUpdatingStatus","updateInProgress","isMounted","menuRef","isTaskValid","id","current","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","maxDepth","canHaveChildren","hasSubtasks","length","allSubtasksCompleted","every","st","status","handleStatusChange","error","position","autoClose","newStatus","response","patch","success","shouldReopenSubtasks","window","confirm","reopenAllSubtasks","console","setTimeout","tasks","subtask","timer","clearTimeout","handleToggleExpand","handleSubtaskStatusChange","subtaskId","prevSubtasks","map","handleReopenParent","handleDeleteTask","title","delete","handleMoveTask","getStatusClass","isCheckboxDisabled","onClick","disabled","description","filter","ref","role","_c2","$RefreshReg$"],"sources":["/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/components/TaskItem.js"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect, useCallback, useRef } from \"react\"\nimport { ChevronDown, ChevronRight, MoreVertical, Check, AlertCircle, ArrowUpDown } from \"lucide-react\"\nimport api from \"../services/api\"\nimport { toast } from \"react-toastify\"\nimport \"./TaskItem.css\"\n\n// Create a separate component for the error state\nconst TaskItemError = () => (\n  <div className=\"task-item-error\">\n    <AlertCircle size={16} className=\"error-icon\" />\n    <span>Invalid task data</span>\n  </div>\n)\n\nconst TaskItem = ({\n  task,\n  onStatusChange,\n  onCreateSubtask,\n  depth = 0,\n  fetchTasks,\n  listId,\n  onMoveTask,\n  onReopenParent,\n}) => {\n  // All hooks must be called at the top level, before any conditional logic\n  const [expanded, setExpanded] = useState(true)\n  const [showMenu, setShowMenu] = useState(false)\n  const [subtasks, setSubtasks] = useState([])\n  const [isUpdatingStatus, setIsUpdatingStatus] = useState(false)\n\n  // Use a ref to track if an update is in progress to prevent duplicate calls\n  const updateInProgress = useRef(false)\n  // Use a ref to track if component is mounted\n  const isMounted = useRef(true)\n  // Use a ref for the dropdown menu to handle clicks outside\n  const menuRef = useRef(null)\n\n  // Check if task is valid - but don't return early!\n  const isTaskValid = task && task.id\n\n  // Set isMounted to false when component unmounts\n  useEffect(() => {\n    isMounted.current = true\n\n    // Add click event listener to close dropdown when clicking outside\n    const handleClickOutside = (event) => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setShowMenu(false)\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside)\n\n    return () => {\n      isMounted.current = false\n      document.removeEventListener(\"mousedown\", handleClickOutside)\n    }\n  }, [])\n\n  // Update subtasks state when task changes\n  useEffect(() => {\n    if (isMounted.current && isTaskValid && task.subtasks) {\n      setSubtasks(task.subtasks || [])\n    }\n  }, [isTaskValid, task?.subtasks])\n\n  // These variables are only used if the task is valid\n  const maxDepth = 2 // 0-based index, so this is 3 levels\n  const canHaveChildren = isTaskValid && depth < maxDepth\n  const hasSubtasks = isTaskValid && subtasks && subtasks.length > 0\n  const allSubtasksCompleted = hasSubtasks && subtasks.every((st) => st.status === \"Done\")\n\n  // Handle status change with proper debouncing and state tracking\n  const handleStatusChange = useCallback(async () => {\n    if (!isTaskValid) return\n\n    // Prevent multiple simultaneous calls\n    if (updateInProgress.current || isUpdatingStatus) return\n\n    // If task has subtasks and not all are completed, prevent manual completion\n    if (hasSubtasks && !allSubtasksCompleted && task.status !== \"Done\") {\n      toast.error(\"Complete all subtasks before marking this task as done\", {\n        position: \"bottom-center\",\n        autoClose: 3000,\n      })\n      return\n    }\n\n    updateInProgress.current = true\n    setIsUpdatingStatus(true)\n\n    const newStatus = task.status === \"Done\" ? \"Todo\" : \"Done\"\n    try {\n      // Make the API call to update the database\n      const response = await api.patch(`/api/todos/task/${task.id}/status`, { status: newStatus })\n\n      // Only show toast and update state if component is still mounted\n      if (isMounted.current) {\n        toast.success(`Task ${newStatus === \"Done\" ? \"completed\" : \"reopened\"}`)\n\n        // If we're reopening this task and it has a parent, notify the parent to reopen too\n        if (newStatus === \"Todo\" && onReopenParent) {\n          onReopenParent()\n        }\n\n        // Update the parent component's state\n        onStatusChange(task.id, newStatus)\n\n        // If we're marking a task as Todo and it has subtasks that are Done,\n        // ask the user if they want to reopen all subtasks as well\n        if (newStatus === \"Todo\" && hasSubtasks && allSubtasksCompleted) {\n          const shouldReopenSubtasks = window.confirm(\"Do you want to reopen all subtasks as well?\")\n\n          if (shouldReopenSubtasks) {\n            reopenAllSubtasks(subtasks)\n          }\n        }\n      }\n    } catch (error) {\n      if (isMounted.current) {\n        toast.error(\"Failed to update task status\")\n        console.error(\"Status update error:\", error)\n      }\n    } finally {\n      if (isMounted.current) {\n        setIsUpdatingStatus(false)\n      }\n      // Add a small delay before allowing new updates\n      setTimeout(() => {\n        updateInProgress.current = false\n      }, 300)\n    }\n  }, [\n    isTaskValid,\n    task?.id,\n    task?.status,\n    onStatusChange,\n    hasSubtasks,\n    allSubtasksCompleted,\n    isUpdatingStatus,\n    onReopenParent,\n    subtasks,\n  ])\n\n  // Recursive function to reopen all subtasks\n  const reopenAllSubtasks = async (tasks) => {\n    for (const subtask of tasks) {\n      try {\n        await api.patch(`/api/todos/task/${subtask.id}/status`, { status: \"Todo\" })\n\n        // Update local state\n        if (isMounted.current) {\n          onStatusChange(subtask.id, \"Todo\")\n        }\n\n        // Recursively reopen nested subtasks\n        if (subtask.subtasks && subtask.subtasks.length > 0) {\n          await reopenAllSubtasks(subtask.subtasks)\n        }\n      } catch (error) {\n        console.error(`Failed to reopen subtask ${subtask.id}:`, error)\n      }\n    }\n  }\n\n  // Handle auto-completion of parent tasks\n  useEffect(() => {\n    let timer\n\n    // Only proceed if task is valid\n    if (!isTaskValid) return () => {}\n\n    // Only run this effect if:\n    // 1. Task has subtasks\n    // 2. Task is not already marked as Done\n    // 3. All subtasks are completed\n    // 4. We're not currently updating status\n    // 5. Component is still mounted\n    if (\n      task.subtasks &&\n      task.subtasks.length > 0 &&\n      task.status !== \"Done\" &&\n      task.subtasks.every((st) => st.status === \"Done\") &&\n      !updateInProgress.current &&\n      !isUpdatingStatus &&\n      isMounted.current\n    ) {\n      // Set the flag to prevent duplicate calls\n      updateInProgress.current = true\n\n      // Call handleStatusChange after a short delay to prevent race conditions\n      timer = setTimeout(() => {\n        if (isMounted.current) {\n          handleStatusChange()\n        }\n      }, 100)\n    }\n\n    // Clean up the timer if the component unmounts or dependencies change\n    return () => {\n      if (timer) clearTimeout(timer)\n    }\n  }, [isTaskValid, task?.subtasks, task?.status, handleStatusChange, isUpdatingStatus])\n\n  const handleToggleExpand = () => {\n    setExpanded(!expanded)\n  }\n\n  const handleSubtaskStatusChange = async (subtaskId, newStatus) => {\n    if (!isTaskValid) return\n\n    // Update local state immediately for better UX\n    if (isMounted.current) {\n      setSubtasks((prevSubtasks) => prevSubtasks.map((st) => (st.id === subtaskId ? { ...st, status: newStatus } : st)))\n    }\n\n    // If a subtask is being reopened and this task is marked as Done,\n    // we need to reopen this task as well\n    if (newStatus === \"Todo\" && task.status === \"Done\") {\n      // Wait a bit to avoid race conditions\n      setTimeout(() => {\n        if (isMounted.current && !updateInProgress.current) {\n          handleStatusChange()\n        }\n      }, 100)\n    }\n  }\n\n  // This function will be passed to child tasks to notify this task when a child is reopened\n  const handleReopenParent = useCallback(() => {\n    if (!isTaskValid) return\n\n    // If this task is marked as Done, reopen it\n    if (task.status === \"Done\" && !updateInProgress.current && !isUpdatingStatus) {\n      handleStatusChange()\n    }\n  }, [isTaskValid, task?.status, handleStatusChange, isUpdatingStatus])\n\n  const handleDeleteTask = async () => {\n    if (!isTaskValid) return\n\n    // Confirm before deleting\n    if (!window.confirm(`Are you sure you want to delete \"${task.title}\"? This cannot be undone.`)) {\n      return\n    }\n\n    try {\n      await api.delete(`/api/todos/task/${task.id}`)\n      if (isMounted.current) {\n        toast.success(\"Task deleted successfully\")\n        fetchTasks()\n      }\n    } catch (error) {\n      if (isMounted.current) {\n        toast.error(\"Failed to delete task\")\n        console.error(error)\n      }\n    }\n  }\n\n  const handleMoveTask = () => {\n    if (!isTaskValid) return\n\n    onMoveTask(task)\n    setShowMenu(false)\n  }\n\n  const getStatusClass = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"status-done\"\n      case \"In Progress\":\n        return \"status-progress\"\n      default:\n        return \"status-todo\"\n    }\n  }\n\n  // If task is not valid, render the error component\n  if (!isTaskValid) {\n    console.error(\"Invalid task object:\", task)\n    return <TaskItemError />\n  }\n\n  // Determine if the checkbox should be disabled\n  const isCheckboxDisabled = isUpdatingStatus || (hasSubtasks && !allSubtasksCompleted && task.status !== \"Done\")\n\n  // Only render the full component if task is valid\n  return (\n    <div className=\"task-item-container\">\n      <div className={`task-item ${task.status === \"Done\" ? \"completed\" : \"\"}`}>\n        <div className=\"task-header\">\n          {hasSubtasks ? (\n            <button\n              className=\"expand-button\"\n              onClick={handleToggleExpand}\n              aria-label={expanded ? \"Collapse subtasks\" : \"Expand subtasks\"}\n            >\n              {expanded ? <ChevronDown size={18} /> : <ChevronRight size={18} />}\n            </button>\n          ) : (\n            <div className=\"expand-placeholder\"></div>\n          )}\n\n          <button\n            className={`task-checkbox ${task.status === \"Done\" ? \"checked\" : \"\"} ${isUpdatingStatus ? \"updating\" : \"\"}`}\n            onClick={handleStatusChange}\n            disabled={isCheckboxDisabled}\n            aria-label={task.status === \"Done\" ? \"Mark as incomplete\" : \"Mark as complete\"}\n            title={isCheckboxDisabled && hasSubtasks ? \"Complete all subtasks first\" : \"\"}\n            data-task-id={task.id}\n          >\n            {task.status === \"Done\" && <Check size={14} className=\"check-icon\" />}\n          </button>\n\n          <div className=\"task-details\">\n            <h3 className={`task-title ${task.status === \"Done\" ? \"completed\" : \"\"}`}>{task.title}</h3>\n            {task.description && <p className=\"task-description\">{task.description}</p>}\n            <div className=\"task-meta\">\n              <span className={`task-status ${getStatusClass(task.status)}`}>{task.status}</span>\n              {hasSubtasks && (\n                <span className=\"task-subtasks-count\">\n                  {subtasks.filter((st) => st.status === \"Done\").length}/{subtasks.length} subtasks\n                </span>\n              )}\n              <span className=\"task-level-indicator\">Level: {depth + 1}</span>\n            </div>\n          </div>\n\n          <div className=\"task-actions\" ref={menuRef}>\n            <button className=\"move-task-button\" onClick={handleMoveTask} aria-label=\"Move task\" title=\"Move this task\">\n              <ArrowUpDown size={16} />\n            </button>\n            <div className=\"dropdown\">\n              <button\n                className=\"dropdown-button\"\n                onClick={() => setShowMenu(!showMenu)}\n                aria-label=\"Task options\"\n                aria-expanded={showMenu}\n                aria-haspopup=\"true\"\n              >\n                <MoreVertical size={18} />\n              </button>\n\n              {showMenu && (\n                <div className=\"dropdown-menu\" role=\"menu\">\n                  {canHaveChildren && (\n                    <button\n                      className=\"dropdown-item\"\n                      onClick={() => {\n                        onCreateSubtask(task.id, task.title)\n                        setShowMenu(false)\n                      }}\n                      role=\"menuitem\"\n                    >\n                      Add Subtask\n                    </button>\n                  )}\n                  <button className=\"dropdown-item\" onClick={handleMoveTask} role=\"menuitem\">\n                    Move Task\n                  </button>\n                  <button className=\"dropdown-item delete\" onClick={handleDeleteTask} role=\"menuitem\">\n                    Delete\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {expanded && hasSubtasks && (\n        <div className=\"subtasks-container\">\n          {subtasks.map((subtask) => (\n            <TaskItem\n              key={subtask.id}\n              task={subtask}\n              onStatusChange={handleSubtaskStatusChange}\n              onCreateSubtask={onCreateSubtask}\n              depth={depth + 1}\n              fetchTasks={fetchTasks}\n              listId={listId}\n              onMoveTask={onMoveTask}\n              onReopenParent={handleReopenParent}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default TaskItem\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}