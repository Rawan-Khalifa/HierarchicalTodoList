{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from \"react\";\nimport api from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is already logged in\n    const storedUser = localStorage.getItem(\"user\");\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (username, password) => {\n    try {\n      const response = await api.post(\"/api/auth/login\", {\n        username,\n        password\n      });\n      const userData = response.data.user;\n      setUser(userData);\n      localStorage.setItem(\"user\", JSON.stringify(userData));\n      return {\n        success: true\n      };\n    } catch (error) {\n      // Enhanced error handling to provide more specific messages\n      let errorMessage = \"Login failed\";\n      if (error.response) {\n        var _error$response$data;\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        errorMessage = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || errorMessage;\n\n        // Check for specific error types\n        if (error.response.status === 404) {\n          errorMessage = \"User not found. Please check your username or sign up.\";\n        } else if (error.response.status === 401) {\n          errorMessage = \"Incorrect password. Please try again.\";\n        }\n      } else if (error.request) {\n        // The request was made but no response was received\n        errorMessage = \"No response from server. Please try again later.\";\n      }\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n  const register = async (username, password) => {\n    try {\n      await api.post(\"/api/auth/register\", {\n        username,\n        password\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response$data2;\n      let errorMessage = \"Registration failed\";\n      if (error.response && (_error$response$data2 = error.response.data) !== null && _error$response$data2 !== void 0 && _error$response$data2.error) {\n        errorMessage = error.response.data.error;\n\n        // Check for specific error types\n        if (error.response.status === 409) {\n          errorMessage = \"Username already exists. Please choose another one.\";\n        }\n      }\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      await api.post(\"/api/auth/logout\");\n      setUser(null);\n      localStorage.removeItem(\"user\");\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: \"Logout failed\"\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      register,\n      logout,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","createContext","useState","useEffect","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","user","setUser","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","login","username","password","response","post","userData","data","setItem","stringify","success","error","errorMessage","_error$response$data","status","request","message","register","_error$response$data2","logout","removeItem","Provider","value","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/context/AuthContext.js"],"sourcesContent":["\"use client\"\n\nimport { createContext, useState, useEffect } from \"react\"\nimport api from \"../services/api\"\n\nexport const AuthContext = createContext()\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const storedUser = localStorage.getItem(\"user\")\n    if (storedUser) {\n      setUser(JSON.parse(storedUser))\n    }\n    setLoading(false)\n  }, [])\n\n  const login = async (username, password) => {\n    try {\n      const response = await api.post(\"/api/auth/login\", { username, password })\n      const userData = response.data.user\n\n      setUser(userData)\n      localStorage.setItem(\"user\", JSON.stringify(userData))\n      return { success: true }\n    } catch (error) {\n      // Enhanced error handling to provide more specific messages\n      let errorMessage = \"Login failed\"\n\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        errorMessage = error.response.data?.error || errorMessage\n\n        // Check for specific error types\n        if (error.response.status === 404) {\n          errorMessage = \"User not found. Please check your username or sign up.\"\n        } else if (error.response.status === 401) {\n          errorMessage = \"Incorrect password. Please try again.\"\n        }\n      } else if (error.request) {\n        // The request was made but no response was received\n        errorMessage = \"No response from server. Please try again later.\"\n      }\n\n      return {\n        success: false,\n        message: errorMessage,\n      }\n    }\n  }\n\n  const register = async (username, password) => {\n    try {\n      await api.post(\"/api/auth/register\", { username, password })\n      return { success: true }\n    } catch (error) {\n      let errorMessage = \"Registration failed\"\n\n      if (error.response && error.response.data?.error) {\n        errorMessage = error.response.data.error\n\n        // Check for specific error types\n        if (error.response.status === 409) {\n          errorMessage = \"Username already exists. Please choose another one.\"\n        }\n      }\n\n      return {\n        success: false,\n        message: errorMessage,\n      }\n    }\n  }\n\n  const logout = async () => {\n    try {\n      await api.post(\"/api/auth/logout\")\n      setUser(null)\n      localStorage.removeItem(\"user\")\n      return { success: true }\n    } catch (error) {\n      return { success: false, message: \"Logout failed\" }\n    }\n  }\n\n  return <AuthContext.Provider value={{ user, login, register, logout, loading }}>{children}</AuthContext.Provider>\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}