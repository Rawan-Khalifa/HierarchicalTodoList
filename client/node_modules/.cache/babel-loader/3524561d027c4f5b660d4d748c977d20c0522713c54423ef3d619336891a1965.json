{"ast":null,"code":"import axios from \"axios\";\n\n// Create axios instance with base URL and credentials\nconst api = axios.create({\n  baseURL: \"http://localhost:5001/api\",\n  withCredentials: true\n});\n\n// Add request interceptor to handle errors\napi.interceptors.request.use(config => {\n  // Check if the backend is available before making the request\n  return config;\n}, error => {\n  console.error(\"API Request Error:\", error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (error.code === \"ERR_NETWORK\") {\n    // Handle network errors (e.g., backend not running)\n    console.error(\"Network Error: Backend might not be running\");\n    return Promise.reject(new Error(\"Cannot connect to the server. Please ensure the backend is running.\"));\n  }\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Handle unauthorized access\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n    window.location.href = \"/login\";\n    return Promise.reject(new Error(\"Session expired. Please login again.\"));\n  }\n  return Promise.reject(error);\n});\n\n// Authentication\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await api.post(\"/auth/register\", {\n      username,\n      password\n    });\n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    return {\n      success: false,\n      error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || \"Registration failed\"\n    };\n  }\n};\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await api.post(\"/auth/login\", {\n      username,\n      password\n    });\n    // Store user info in localStorage\n    localStorage.setItem(\"user\", JSON.stringify(response.data.user));\n    localStorage.setItem(\"token\", response.data.token);\n    api.defaults.headers.common[\"Authorization\"] = `Bearer ${response.data.token}`;\n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    return {\n      success: false,\n      error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || \"Login failed\"\n    };\n  }\n};\nexport const logoutUser = async () => {\n  try {\n    await api.post(\"/auth/logout\");\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n    delete api.defaults.headers.common[\"Authorization\"];\n    return {\n      success: true\n    };\n  } catch (error) {\n    // Still remove local storage items even if the API call fails\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n    delete api.defaults.headers.common[\"Authorization\"];\n    return {\n      success: false,\n      error: error.message || \"Logout failed\"\n    };\n  }\n};\n\n// Todo Lists\nexport const getTodoLists = async () => {\n  try {\n    const response = await api.get(\"/todos/lists\");\n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    return {\n      success: false,\n      error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || \"Failed to fetch lists\"\n    };\n  }\n};\nexport const createList = async title => {\n  try {\n    const response = await api.post(\"/todos/list\", {\n      title\n    });\n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    return {\n      success: false,\n      error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || \"Failed to create list\"\n    };\n  }\n};\n\n// Tasks\nexport const getTasks = async listId => {\n  try {\n    const response = await api.get(`/todos/tasks/${listId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching tasks:\", error);\n    throw new Error(error.message || \"Failed to load tasks\");\n  }\n};\nexport const createTask = async taskData => {\n  try {\n    const response = await api.post(\"/todos/task\", taskData);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error creating task:\", error);\n    throw new Error(error.message || \"Failed to create task\");\n  }\n};\nexport const updateTaskStatus = async (taskId, status) => {\n  try {\n    const response = await api.patch(`/todos/task/${taskId}/status`, {\n      status\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error updating task status:\", error);\n    throw new Error(error.message || \"Failed to update task status\");\n  }\n};\n\n// Set token on app initialization\nconst token = localStorage.getItem(\"token\");\nif (token) {\n  api.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n}\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","interceptors","request","use","config","error","console","Promise","reject","response","_error$response","code","Error","status","localStorage","removeItem","window","location","href","registerUser","username","password","post","success","data","_error$response2","_error$response2$data","loginUser","setItem","JSON","stringify","user","token","defaults","headers","common","_error$response3","_error$response3$data","logoutUser","message","getTodoLists","get","_error$response4","_error$response4$data","createList","title","_error$response5","_error$response5$data","getTasks","listId","createTask","taskData","updateTaskStatus","taskId","patch","getItem"],"sources":["/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/services/api.js"],"sourcesContent":["import axios from \"axios\"\n\n// Create axios instance with base URL and credentials\nconst api = axios.create({\n  baseURL: \"http://localhost:5001/api\",\n  withCredentials: true,\n})\n\n// Add request interceptor to handle errors\napi.interceptors.request.use(\n  (config) => {\n    // Check if the backend is available before making the request\n    return config\n  },\n  (error) => {\n    console.error(\"API Request Error:\", error)\n    return Promise.reject(error)\n  },\n)\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.code === \"ERR_NETWORK\") {\n      // Handle network errors (e.g., backend not running)\n      console.error(\"Network Error: Backend might not be running\")\n      return Promise.reject(new Error(\"Cannot connect to the server. Please ensure the backend is running.\"))\n    }\n\n    if (error.response?.status === 401) {\n      // Handle unauthorized access\n      localStorage.removeItem(\"user\")\n      localStorage.removeItem(\"token\")\n      window.location.href = \"/login\"\n      return Promise.reject(new Error(\"Session expired. Please login again.\"))\n    }\n\n    return Promise.reject(error)\n  },\n)\n\n// Authentication\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await api.post(\"/auth/register\", { username, password })\n    return { success: true, data: response.data }\n  } catch (error) {\n    return {\n      success: false,\n      error: error.response?.data?.error || \"Registration failed\",\n    }\n  }\n}\n\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await api.post(\"/auth/login\", { username, password })\n    // Store user info in localStorage\n    localStorage.setItem(\"user\", JSON.stringify(response.data.user))\n    localStorage.setItem(\"token\", response.data.token)\n    api.defaults.headers.common[\"Authorization\"] = `Bearer ${response.data.token}`\n    return { success: true, data: response.data }\n  } catch (error) {\n    return {\n      success: false,\n      error: error.response?.data?.error || \"Login failed\",\n    }\n  }\n}\n\nexport const logoutUser = async () => {\n  try {\n    await api.post(\"/auth/logout\")\n    localStorage.removeItem(\"user\")\n    localStorage.removeItem(\"token\")\n    delete api.defaults.headers.common[\"Authorization\"]\n    return { success: true }\n  } catch (error) {\n    // Still remove local storage items even if the API call fails\n    localStorage.removeItem(\"user\")\n    localStorage.removeItem(\"token\")\n    delete api.defaults.headers.common[\"Authorization\"]\n    return {\n      success: false,\n      error: error.message || \"Logout failed\",\n    }\n  }\n}\n\n// Todo Lists\nexport const getTodoLists = async () => {\n  try {\n    const response = await api.get(\"/todos/lists\")\n    return { success: true, data: response.data }\n  } catch (error) {\n    return {\n      success: false,\n      error: error.response?.data?.error || \"Failed to fetch lists\",\n    }\n  }\n}\n\nexport const createList = async (title) => {\n  try {\n    const response = await api.post(\"/todos/list\", { title })\n    return { success: true, data: response.data }\n  } catch (error) {\n    return {\n      success: false,\n      error: error.response?.data?.error || \"Failed to create list\",\n    }\n  }\n}\n\n// Tasks\nexport const getTasks = async (listId) => {\n  try {\n    const response = await api.get(`/todos/tasks/${listId}`)\n    return response.data\n  } catch (error) {\n    console.error(\"Error fetching tasks:\", error)\n    throw new Error(error.message || \"Failed to load tasks\")\n  }\n}\n\nexport const createTask = async (taskData) => {\n  try {\n    const response = await api.post(\"/todos/task\", taskData)\n    return response.data\n  } catch (error) {\n    console.error(\"Error creating task:\", error)\n    throw new Error(error.message || \"Failed to create task\")\n  }\n}\n\nexport const updateTaskStatus = async (taskId, status) => {\n  try {\n    const response = await api.patch(`/todos/task/${taskId}/status`, { status })\n    return response.data\n  } catch (error) {\n    console.error(\"Error updating task status:\", error)\n    throw new Error(error.message || \"Failed to update task status\")\n  }\n}\n\n// Set token on app initialization\nconst token = localStorage.getItem(\"token\")\nif (token) {\n  api.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`\n}\n\nexport default api\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}