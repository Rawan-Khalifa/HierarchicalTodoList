{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/components/TodoList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport api from \"../services/api\";\nimport { toast } from \"react-toastify\";\nimport TaskItem from \"./TaskItem\";\nimport CreateTaskModal from \"./CreateTaskModal\";\nimport { Plus, Loader } from \"lucide-react\";\nimport \"./TodoList.css\";\n\n// Motivational quotes to display when list is empty\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MOTIVATIONAL_QUOTES = [\"The secret of getting ahead is getting started.\", \"Don't wait. The time will never be just right.\", \"Small progress is still progress.\", \"Focus on progress, not perfection.\", \"The best way to predict the future is to create it.\"];\nconst TodoList = ({\n  listId,\n  listTitle\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [lists, setLists] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [parentTask, setParentTask] = useState(null);\n  const [completionStats, setCompletionStats] = useState({\n    completed: 0,\n    total: 0,\n    percentage: 0\n  });\n  const [motivationalQuote, setMotivationalQuote] = useState(\"\");\n\n  // Select a random motivational quote\n  useEffect(() => {\n    const randomIndex = Math.floor(Math.random() * MOTIVATIONAL_QUOTES.length);\n    setMotivationalQuote(MOTIVATIONAL_QUOTES[randomIndex]);\n  }, [listId]);\n\n  // Fetch all lists for the move task functionality\n  const fetchLists = useCallback(async () => {\n    try {\n      const response = await api.get(\"/api/todos/lists\");\n      setLists(response.data);\n    } catch (error) {\n      console.error(\"Failed to fetch lists:\", error);\n    }\n  }, []);\n  const fetchTasks = useCallback(async () => {\n    if (!listId) return;\n    try {\n      setIsLoading(true);\n      const response = await api.get(`/api/todos/tasks/${listId}`);\n      setTasks(response.data);\n\n      // Calculate completion statistics\n      calculateCompletionStats(response.data);\n    } catch (error) {\n      toast.error(\"Failed to fetch tasks\");\n    } finally {\n      setIsLoading(false);\n    }\n  }, [listId]);\n\n  // Calculate task completion statistics\n  const calculateCompletionStats = taskList => {\n    let completed = 0;\n    let total = 0;\n    const countTasks = tasks => {\n      tasks.forEach(task => {\n        total++;\n        if (task.status === \"Done\") completed++;\n        if (task.subtasks && task.subtasks.length > 0) {\n          countTasks(task.subtasks);\n        }\n      });\n    };\n    countTasks(taskList);\n    const percentage = total > 0 ? Math.round(completed / total * 100) : 0;\n    setCompletionStats({\n      completed,\n      total,\n      percentage\n    });\n  };\n  useEffect(() => {\n    if (listId) {\n      fetchTasks();\n      fetchLists();\n    }\n  }, [listId, fetchTasks, fetchLists]);\n  const handleCreateTask = async taskData => {\n    try {\n      const payload = {\n        title: taskData.title,\n        description: taskData.description || \"\",\n        status: \"Todo\",\n        list_id: listId,\n        parent_id: parentTask ? parentTask.id : null\n      };\n      await api.post(\"/api/todos/task\", payload);\n      toast.success(\"Task created successfully\");\n      fetchTasks();\n      setIsCreateModalOpen(false);\n      setParentTask(null);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || \"Failed to create task\";\n      toast.error(errorMessage);\n    }\n  };\n  const handleUpdateTaskStatus = async (taskId, newStatus) => {\n    // Update the local state first for immediate feedback\n    setTasks(prevTasks => updateTaskStatusInTree(prevTasks, taskId, newStatus));\n\n    // Then fetch the updated tasks to ensure consistency\n    await fetchTasks();\n  };\n\n  // Helper function to update task status in the nested tree structure\n  const updateTaskStatusInTree = (tasks, taskId, newStatus) => {\n    return tasks.map(task => {\n      if (task.id === taskId) {\n        return {\n          ...task,\n          status: newStatus\n        };\n      }\n      if (task.subtasks && task.subtasks.length > 0) {\n        return {\n          ...task,\n          subtasks: updateTaskStatusInTree(task.subtasks, taskId, newStatus)\n        };\n      }\n      return task;\n    });\n  };\n  const openCreateSubtaskModal = task => {\n    setParentTask(task);\n    setIsCreateModalOpen(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-list\",\n    children: [!isLoading && tasks.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-fill\",\n          style: {\n            width: `${completionStats.percentage}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [completionStats.completed, \" of \", completionStats.total, \" tasks completed\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [completionStats.percentage, \"% done\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-list-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"todo-list-title\",\n        children: listTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setParentTask(null);\n          setIsCreateModalOpen(true);\n        },\n        className: \"btn btn-primary\",\n        children: [/*#__PURE__*/_jsxDEV(Plus, {\n          size: 18,\n          className: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), \"Add Task\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this) : tasks.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty-tasks\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No tasks in this list yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsCreateModalOpen(true),\n        className: \"btn btn-primary\",\n        children: [/*#__PURE__*/_jsxDEV(Plus, {\n          size: 18,\n          className: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this), \"Create Your First Task\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"motivational-quote\",\n        children: [\"\\\"\", motivationalQuote, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tasks-container\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n        task: task,\n        onStatusChange: handleUpdateTaskStatus,\n        onCreateSubtask: openCreateSubtaskModal,\n        depth: 0,\n        fetchTasks: fetchTasks,\n        lists: lists\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CreateTaskModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => {\n        setIsCreateModalOpen(false);\n        setParentTask(null);\n      },\n      onCreate: handleCreateTask,\n      isSubtask: !!parentTask,\n      parentTaskTitle: parentTask === null || parentTask === void 0 ? void 0 : parentTask.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoList, \"3sRdfugv23eOr6CVR6hS6gLfwTY=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","useCallback","api","toast","TaskItem","CreateTaskModal","Plus","Loader","jsxDEV","_jsxDEV","MOTIVATIONAL_QUOTES","TodoList","listId","listTitle","tasks","setTasks","lists","setLists","isLoading","setIsLoading","isCreateModalOpen","setIsCreateModalOpen","parentTask","setParentTask","completionStats","setCompletionStats","completed","total","percentage","motivationalQuote","setMotivationalQuote","randomIndex","Math","floor","random","length","fetchLists","response","get","data","error","console","fetchTasks","calculateCompletionStats","taskList","countTasks","forEach","task","status","subtasks","round","handleCreateTask","taskData","payload","title","description","list_id","parent_id","id","post","success","_error$response","_error$response$data","errorMessage","handleUpdateTaskStatus","taskId","newStatus","prevTasks","updateTaskStatusInTree","map","openCreateSubtaskModal","className","children","style","width","fileName","lineNumber","columnNumber","onClick","size","onStatusChange","onCreateSubtask","depth","isOpen","onClose","onCreate","isSubtask","parentTaskTitle","_c","$RefreshReg$"],"sources":["/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/components/TodoList.js"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect, useCallback } from \"react\"\nimport api from \"../services/api\"\nimport { toast } from \"react-toastify\"\nimport TaskItem from \"./TaskItem\"\nimport CreateTaskModal from \"./CreateTaskModal\"\nimport { Plus, Loader } from \"lucide-react\"\nimport \"./TodoList.css\"\n\n// Motivational quotes to display when list is empty\nconst MOTIVATIONAL_QUOTES = [\n  \"The secret of getting ahead is getting started.\",\n  \"Don't wait. The time will never be just right.\",\n  \"Small progress is still progress.\",\n  \"Focus on progress, not perfection.\",\n  \"The best way to predict the future is to create it.\",\n]\n\nconst TodoList = ({ listId, listTitle }) => {\n  const [tasks, setTasks] = useState([])\n  const [lists, setLists] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)\n  const [parentTask, setParentTask] = useState(null)\n  const [completionStats, setCompletionStats] = useState({ completed: 0, total: 0, percentage: 0 })\n  const [motivationalQuote, setMotivationalQuote] = useState(\"\")\n\n  // Select a random motivational quote\n  useEffect(() => {\n    const randomIndex = Math.floor(Math.random() * MOTIVATIONAL_QUOTES.length)\n    setMotivationalQuote(MOTIVATIONAL_QUOTES[randomIndex])\n  }, [listId])\n\n  // Fetch all lists for the move task functionality\n  const fetchLists = useCallback(async () => {\n    try {\n      const response = await api.get(\"/api/todos/lists\")\n      setLists(response.data)\n    } catch (error) {\n      console.error(\"Failed to fetch lists:\", error)\n    }\n  }, [])\n\n  const fetchTasks = useCallback(async () => {\n    if (!listId) return\n\n    try {\n      setIsLoading(true)\n      const response = await api.get(`/api/todos/tasks/${listId}`)\n      setTasks(response.data)\n\n      // Calculate completion statistics\n      calculateCompletionStats(response.data)\n    } catch (error) {\n      toast.error(\"Failed to fetch tasks\")\n    } finally {\n      setIsLoading(false)\n    }\n  }, [listId])\n\n  // Calculate task completion statistics\n  const calculateCompletionStats = (taskList) => {\n    let completed = 0\n    let total = 0\n\n    const countTasks = (tasks) => {\n      tasks.forEach((task) => {\n        total++\n        if (task.status === \"Done\") completed++\n        if (task.subtasks && task.subtasks.length > 0) {\n          countTasks(task.subtasks)\n        }\n      })\n    }\n\n    countTasks(taskList)\n\n    const percentage = total > 0 ? Math.round((completed / total) * 100) : 0\n    setCompletionStats({ completed, total, percentage })\n  }\n\n  useEffect(() => {\n    if (listId) {\n      fetchTasks()\n      fetchLists()\n    }\n  }, [listId, fetchTasks, fetchLists])\n\n  const handleCreateTask = async (taskData) => {\n    try {\n      const payload = {\n        title: taskData.title,\n        description: taskData.description || \"\",\n        status: \"Todo\",\n        list_id: listId,\n        parent_id: parentTask ? parentTask.id : null,\n      }\n\n      await api.post(\"/api/todos/task\", payload)\n      toast.success(\"Task created successfully\")\n      fetchTasks()\n      setIsCreateModalOpen(false)\n      setParentTask(null)\n    } catch (error) {\n      const errorMessage = error.response?.data?.error || \"Failed to create task\"\n      toast.error(errorMessage)\n    }\n  }\n\n  const handleUpdateTaskStatus = async (taskId, newStatus) => {\n    // Update the local state first for immediate feedback\n    setTasks((prevTasks) => updateTaskStatusInTree(prevTasks, taskId, newStatus))\n\n    // Then fetch the updated tasks to ensure consistency\n    await fetchTasks()\n  }\n\n  // Helper function to update task status in the nested tree structure\n  const updateTaskStatusInTree = (tasks, taskId, newStatus) => {\n    return tasks.map((task) => {\n      if (task.id === taskId) {\n        return { ...task, status: newStatus }\n      }\n\n      if (task.subtasks && task.subtasks.length > 0) {\n        return {\n          ...task,\n          subtasks: updateTaskStatusInTree(task.subtasks, taskId, newStatus),\n        }\n      }\n\n      return task\n    })\n  }\n\n  const openCreateSubtaskModal = (task) => {\n    setParentTask(task)\n    setIsCreateModalOpen(true)\n  }\n\n  return (\n    <div className=\"todo-list\">\n      {/* Progress bar */}\n      {!isLoading && tasks.length > 0 && (\n        <div className=\"progress-container\">\n          <div className=\"progress-bar\">\n            <div className=\"progress-fill\" style={{ width: `${completionStats.percentage}%` }}></div>\n          </div>\n          <div className=\"progress-stats\">\n            <span>\n              {completionStats.completed} of {completionStats.total} tasks completed\n            </span>\n            <span>{completionStats.percentage}% done</span>\n          </div>\n        </div>\n      )}\n\n      <div className=\"todo-list-header\">\n        <h2 className=\"todo-list-title\">{listTitle}</h2>\n        <button\n          onClick={() => {\n            setParentTask(null)\n            setIsCreateModalOpen(true)\n          }}\n          className=\"btn btn-primary\"\n        >\n          <Plus size={18} className=\"icon\" />\n          Add Task\n        </button>\n      </div>\n\n      {isLoading ? (\n        <div className=\"loading-container\">\n          <Loader className=\"loading-spinner\" />\n        </div>\n      ) : tasks.length === 0 ? (\n        <div className=\"empty-tasks\">\n          <p>No tasks in this list yet.</p>\n          <button onClick={() => setIsCreateModalOpen(true)} className=\"btn btn-primary\">\n            <Plus size={18} className=\"icon\" />\n            Create Your First Task\n          </button>\n          <div className=\"motivational-quote\">\"{motivationalQuote}\"</div>\n        </div>\n      ) : (\n        <div className=\"tasks-container\">\n          {tasks.map((task) => (\n            <TaskItem\n              key={task.id}\n              task={task}\n              onStatusChange={handleUpdateTaskStatus}\n              onCreateSubtask={openCreateSubtaskModal}\n              depth={0}\n              fetchTasks={fetchTasks}\n              lists={lists}\n            />\n          ))}\n        </div>\n      )}\n\n      <CreateTaskModal\n        isOpen={isCreateModalOpen}\n        onClose={() => {\n          setIsCreateModalOpen(false)\n          setParentTask(null)\n        }}\n        onCreate={handleCreateTask}\n        isSubtask={!!parentTask}\n        parentTaskTitle={parentTask?.title}\n      />\n    </div>\n  )\n}\n\nexport default TodoList;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}