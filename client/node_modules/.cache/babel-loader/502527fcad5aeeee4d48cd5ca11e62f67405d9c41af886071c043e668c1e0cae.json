{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/components/TodoList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useRef } from \"react\";\nimport { Plus, Loader } from \"lucide-react\";\nimport TaskItem from \"./TaskItem\";\nimport CreateTaskModal from \"./CreateTaskModal\";\nimport MoveTaskModal from \"./MoveTaskModal\";\nimport api from \"../services/api\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./TodoList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoList = ({\n  list,\n  lists\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showMoveModal, setShowMoveModal] = useState(false);\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [parentTaskId, setParentTaskId] = useState(null);\n  const [parentTaskTitle, setParentTaskTitle] = useState(\"\");\n  const [completedTasksCount, setCompletedTasksCount] = useState(0);\n  const [totalTasksCount, setTotalTasksCount] = useState(0);\n\n  // Use a ref to track if component is mounted\n  const isMounted = useRef(true);\n  // Use a ref to track if an update is in progress\n  const statusUpdateInProgress = useRef({});\n  // Use a ref to track if we're currently updating the progress bar\n  const progressUpdateInProgress = useRef(false);\n\n  // Set isMounted to false when component unmounts\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  // Helper function to count tasks and completed tasks\n  const countTasksAndCompleted = useCallback(taskList => {\n    let total = 0;\n    let completed = 0;\n    const countRecursive = items => {\n      for (const item of items) {\n        total++;\n        if (item.status === \"Done\") completed++;\n        if (item.subtasks && item.subtasks.length > 0) {\n          countRecursive(item.subtasks);\n        }\n      }\n    };\n    countRecursive(taskList);\n    return {\n      total,\n      completed\n    };\n  }, []);\n\n  // Helper function to update progress stats\n  const updateProgressStats = useCallback(() => {\n    if (progressUpdateInProgress.current) return;\n    progressUpdateInProgress.current = true;\n    try {\n      const {\n        total,\n        completed\n      } = countTasksAndCompleted(tasks);\n      if (total !== totalTasksCount || completed !== completedTasksCount) {\n        setTotalTasksCount(total);\n        setCompletedTasksCount(completed);\n        console.log(`Progress updated: ${completed}/${total} tasks completed (${Math.round((completed / total || 0) * 100)}%)`);\n      }\n    } finally {\n      progressUpdateInProgress.current = false;\n    }\n  }, [tasks, countTasksAndCompleted, totalTasksCount, completedTasksCount]);\n\n  // Update progress whenever tasks change\n  useEffect(() => {\n    updateProgressStats();\n  }, [tasks, updateProgressStats]);\n\n  // Memoize fetchTasks to prevent infinite loops\n  const fetchTasks = useCallback(async () => {\n    if (!list || !list.id) return;\n    try {\n      setLoading(true);\n      const response = await api.get(`/api/todos/tasks/${list.id}`);\n      if (!isMounted.current) return;\n\n      // Map backend response to our frontend structure\n      const mappedTasks = response.data.map(task => ({\n        id: task.id,\n        title: task.title,\n        description: task.description || \"\",\n        status: task.status,\n        subtasks: task.subtasks || []\n      }));\n      setTasks(mappedTasks);\n    } catch (error) {\n      console.error(\"Failed to fetch tasks:\", error);\n      if (isMounted.current) {\n        toast.error(\"Failed to load tasks\");\n      }\n    } finally {\n      if (isMounted.current) {\n        setLoading(false);\n      }\n    }\n  }, [list]);\n  useEffect(() => {\n    if (list && list.id) {\n      fetchTasks();\n    }\n\n    // Clear the status update tracking when list changes\n    return () => {\n      statusUpdateInProgress.current = {};\n    };\n  }, [list, fetchTasks]);\n\n  // Helper function to find a task by ID in the task hierarchy\n  const findTaskById = useCallback((taskList, taskId) => {\n    for (const task of taskList) {\n      if (task.id === taskId) {\n        return task;\n      }\n      if (task.subtasks && task.subtasks.length > 0) {\n        const found = findTaskById(task.subtasks, taskId);\n        if (found) return found;\n      }\n    }\n    return null;\n  }, []);\n\n  // Helper function to find a parent task by child ID\n  const findParentTask = useCallback((taskList, childId, parentTask = null) => {\n    for (const task of taskList) {\n      if (task.subtasks && task.subtasks.some(st => st.id === childId)) {\n        return task;\n      }\n      if (task.subtasks && task.subtasks.length > 0) {\n        const found = findParentTask(task.subtasks, childId, task);\n        if (found) return found;\n      }\n    }\n    return null;\n  }, []);\n  const handleCreateTask = async taskData => {\n    try {\n      const payload = {\n        title: taskData.title,\n        description: taskData.description || \"\",\n        status: \"Todo\",\n        list_id: list.id,\n        parent_id: parentTaskId\n      };\n\n      // If we're adding a subtask to a completed parent, we need to update the parent status\n      if (parentTaskId) {\n        const parentTask = findTaskById(tasks, parentTaskId);\n\n        // If parent is marked as done, update its status to Todo\n        if (parentTask && parentTask.status === \"Done\") {\n          await api.patch(`/api/todos/task/${parentTaskId}/status`, {\n            status: \"Todo\"\n          });\n          toast.info(\"Parent task reopened because a new subtask was added\");\n        }\n      }\n      await api.post(\"/api/todos/task\", payload);\n      if (isMounted.current) {\n        toast.success(`${parentTaskId ? \"Subtask\" : \"Task\"} created successfully`);\n        fetchTasks(); // This will update the progress bar as well\n      }\n      return true;\n    } catch (error) {\n      console.error(\"Failed to create task:\", error);\n      if (isMounted.current) {\n        var _error$response, _error$response$data;\n        toast.error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || \"Failed to create task\");\n      }\n      throw error;\n    }\n  };\n  const handleStatusChange = useCallback(async (taskId, newStatus) => {\n    // Prevent duplicate updates for the same task\n    if (statusUpdateInProgress.current[taskId]) return;\n    statusUpdateInProgress.current[taskId] = true;\n    try {\n      // Find the task in our state\n      const task = findTaskById(tasks, taskId);\n      if (!task) {\n        console.error(`Task with ID ${taskId} not found`);\n        return;\n      }\n\n      // If task has subtasks and not all are completed, prevent manual completion\n      if (newStatus === \"Done\" && task.subtasks && task.subtasks.length > 0 && !task.subtasks.every(st => st.status === \"Done\")) {\n        toast.error(\"Complete all subtasks before marking this task as done\", {\n          position: \"bottom-center\",\n          autoClose: 3000\n        });\n        return;\n      }\n\n      // Make the API call to update the database\n      await api.patch(`/api/todos/task/${taskId}/status`, {\n        status: newStatus\n      });\n\n      // Update our local state\n      setTasks(prevTasks => {\n        const updateTaskStatus = taskList => {\n          return taskList.map(t => {\n            if (t.id === taskId) {\n              return {\n                ...t,\n                status: newStatus\n              };\n            }\n            if (t.subtasks && t.subtasks.length > 0) {\n              return {\n                ...t,\n                subtasks: updateTaskStatus(t.subtasks)\n              };\n            }\n            return t;\n          });\n        };\n        return updateTaskStatus(prevTasks);\n      });\n\n      // If we're reopening a task, check if it has a parent that needs to be reopened\n      if (newStatus === \"Todo\") {\n        const parentTask = findParentTask(tasks, taskId);\n        if (parentTask && parentTask.status === \"Done\") {\n          // Wait a bit to avoid race conditions\n          setTimeout(() => {\n            handleStatusChange(parentTask.id, \"Todo\");\n          }, 100);\n        }\n      }\n\n      // If we're completing a task, check if all siblings are also complete\n      // to potentially mark the parent as complete\n      if (newStatus === \"Done\") {\n        const parentTask = findParentTask(tasks, taskId);\n        if (parentTask && parentTask.status !== \"Done\") {\n          const allSiblingsComplete = parentTask.subtasks.every(st => st.id === taskId ? newStatus === \"Done\" : st.status === \"Done\");\n          if (allSiblingsComplete) {\n            // Wait a bit to avoid race conditions\n            setTimeout(() => {\n              handleStatusChange(parentTask.id, \"Done\");\n            }, 100);\n          }\n        }\n      }\n\n      // If we're marking a task as Todo and it has subtasks that are Done,\n      // ask the user if they want to reopen all subtasks as well\n      if (newStatus === \"Todo\" && task.subtasks && task.subtasks.length > 0 && task.subtasks.some(st => st.status === \"Done\")) {\n        const shouldReopenSubtasks = window.confirm(\"Do you want to reopen all subtasks as well?\");\n        if (shouldReopenSubtasks) {\n          // Reopen all subtasks recursively\n          const reopenSubtasks = async subtasks => {\n            for (const subtask of subtasks) {\n              if (subtask.status === \"Done\") {\n                await api.patch(`/api/todos/task/${subtask.id}/status`, {\n                  status: \"Todo\"\n                });\n\n                // Update our local state for this subtask\n                setTasks(prevTasks => {\n                  const updateSubtaskStatus = taskList => {\n                    return taskList.map(t => {\n                      if (t.id === subtask.id) {\n                        return {\n                          ...t,\n                          status: \"Todo\"\n                        };\n                      }\n                      if (t.subtasks && t.subtasks.length > 0) {\n                        return {\n                          ...t,\n                          subtasks: updateSubtaskStatus(t.subtasks)\n                        };\n                      }\n                      return t;\n                    });\n                  };\n                  return updateSubtaskStatus(prevTasks);\n                });\n              }\n\n              // Recursively reopen nested subtasks\n              if (subtask.subtasks && subtask.subtasks.length > 0) {\n                await reopenSubtasks(subtask.subtasks);\n              }\n            }\n          };\n          await reopenSubtasks(task.subtasks);\n        }\n      }\n      toast.success(`Task ${newStatus === \"Done\" ? \"completed\" : \"reopened\"}`);\n    } catch (error) {\n      console.error(\"Failed to update task status:\", error);\n      toast.error(\"Failed to update task status\");\n    } finally {\n      // Clear the update flag after a delay\n      setTimeout(() => {\n        statusUpdateInProgress.current[taskId] = false;\n      }, 300);\n    }\n  }, [tasks, findTaskById, findParentTask]);\n  const handleCreateSubtask = (parentId, parentTitle) => {\n    setParentTaskId(parentId);\n    setParentTaskTitle(parentTitle);\n    setShowCreateModal(true);\n  };\n  const handleMoveTask = task => {\n    setSelectedTask(task);\n    setShowMoveModal(true);\n  };\n  const getMotivationalQuote = () => {\n    const quotes = [\"The secret of getting ahead is getting started.\", \"Don't wait. The time will never be just right.\", \"Start where you are. Use what you have. Do what you can.\", \"The beginning is always the hardest. Keep going!\", \"Small progress is still progress.\"];\n    return quotes[Math.floor(Math.random() * quotes.length)];\n  };\n  const calculateProgress = () => {\n    if (totalTasksCount === 0) return 0;\n    return completedTasksCount / totalTasksCount * 100;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-list-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"todo-list-title\",\n        children: (list === null || list === void 0 ? void 0 : list.title) || \"Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button primary\",\n        onClick: () => {\n          setParentTaskId(null);\n          setParentTaskTitle(\"\");\n          setShowCreateModal(true);\n        },\n        children: [/*#__PURE__*/_jsxDEV(Plus, {\n          size: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this), totalTasksCount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [completedTasksCount, \" of \", totalTasksCount, \" tasks completed\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [Math.round(calculateProgress()), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar-fill\",\n          style: {\n            width: `${calculateProgress()}%`\n          },\n          \"data-progress\": `${Math.round(calculateProgress())}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 9\n    }, this) : tasks.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty-tasks\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No tasks yet. Create your first task to get started!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button primary\",\n        onClick: () => {\n          setParentTaskId(null);\n          setParentTaskTitle(\"\");\n          setShowCreateModal(true);\n        },\n        children: [/*#__PURE__*/_jsxDEV(Plus, {\n          size: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Create Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"motivational-quote\",\n        children: getMotivationalQuote()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tasks-container\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n        task: task,\n        onStatusChange: handleStatusChange,\n        onCreateSubtask: handleCreateSubtask,\n        depth: 0,\n        fetchTasks: fetchTasks,\n        listId: list.id,\n        onMoveTask: handleMoveTask\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CreateTaskModal, {\n      isOpen: showCreateModal,\n      onClose: () => {\n        setShowCreateModal(false);\n        setParentTaskId(null);\n        setParentTaskTitle(\"\");\n      },\n      onCreate: handleCreateTask,\n      isSubtask: !!parentTaskId,\n      parentTaskTitle: parentTaskTitle,\n      listId: list.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this), selectedTask && /*#__PURE__*/_jsxDEV(MoveTaskModal, {\n      isOpen: showMoveModal,\n      onClose: () => {\n        setShowMoveModal(false);\n        setSelectedTask(null);\n      },\n      lists: lists,\n      currentListId: list.id,\n      taskTitle: selectedTask.title,\n      task: selectedTask,\n      fetchTasks: fetchTasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 355,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoList, \"eagaqeYTar9ps6eURFTRlJXjEBQ=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","useCallback","useRef","Plus","Loader","TaskItem","CreateTaskModal","MoveTaskModal","api","toast","jsxDEV","_jsxDEV","TodoList","list","lists","tasks","setTasks","loading","setLoading","showCreateModal","setShowCreateModal","showMoveModal","setShowMoveModal","selectedTask","setSelectedTask","parentTaskId","setParentTaskId","parentTaskTitle","setParentTaskTitle","completedTasksCount","setCompletedTasksCount","totalTasksCount","setTotalTasksCount","isMounted","statusUpdateInProgress","progressUpdateInProgress","current","countTasksAndCompleted","taskList","total","completed","countRecursive","items","item","status","subtasks","length","updateProgressStats","console","log","Math","round","fetchTasks","id","response","get","mappedTasks","data","map","task","title","description","error","findTaskById","taskId","found","findParentTask","childId","parentTask","some","st","handleCreateTask","taskData","payload","list_id","parent_id","patch","info","post","success","_error$response","_error$response$data","handleStatusChange","newStatus","every","position","autoClose","prevTasks","updateTaskStatus","t","setTimeout","allSiblingsComplete","shouldReopenSubtasks","window","confirm","reopenSubtasks","subtask","updateSubtaskStatus","handleCreateSubtask","parentId","parentTitle","handleMoveTask","getMotivationalQuote","quotes","floor","random","calculateProgress","className","children","fileName","lineNumber","columnNumber","onClick","size","style","width","onStatusChange","onCreateSubtask","depth","listId","onMoveTask","isOpen","onClose","onCreate","isSubtask","currentListId","taskTitle","_c","$RefreshReg$"],"sources":["/Users/rwankhalifa/Documents/HierarchicalTodoList/client/src/components/TodoList.js"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect, useCallback, useRef } from \"react\"\nimport { Plus, Loader } from \"lucide-react\"\nimport TaskItem from \"./TaskItem\"\nimport CreateTaskModal from \"./CreateTaskModal\"\nimport MoveTaskModal from \"./MoveTaskModal\"\nimport api from \"../services/api\"\nimport { toast } from \"react-toastify\"\nimport \"react-toastify/dist/ReactToastify.css\"\nimport \"./TodoList.css\"\n\nconst TodoList = ({ list, lists }) => {\n  const [tasks, setTasks] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [showCreateModal, setShowCreateModal] = useState(false)\n  const [showMoveModal, setShowMoveModal] = useState(false)\n  const [selectedTask, setSelectedTask] = useState(null)\n  const [parentTaskId, setParentTaskId] = useState(null)\n  const [parentTaskTitle, setParentTaskTitle] = useState(\"\")\n  const [completedTasksCount, setCompletedTasksCount] = useState(0)\n  const [totalTasksCount, setTotalTasksCount] = useState(0)\n\n  // Use a ref to track if component is mounted\n  const isMounted = useRef(true)\n  // Use a ref to track if an update is in progress\n  const statusUpdateInProgress = useRef({})\n  // Use a ref to track if we're currently updating the progress bar\n  const progressUpdateInProgress = useRef(false)\n\n  // Set isMounted to false when component unmounts\n  useEffect(() => {\n    isMounted.current = true\n    return () => {\n      isMounted.current = false\n    }\n  }, [])\n\n  // Helper function to count tasks and completed tasks\n  const countTasksAndCompleted = useCallback((taskList) => {\n    let total = 0\n    let completed = 0\n\n    const countRecursive = (items) => {\n      for (const item of items) {\n        total++\n        if (item.status === \"Done\") completed++\n\n        if (item.subtasks && item.subtasks.length > 0) {\n          countRecursive(item.subtasks)\n        }\n      }\n    }\n\n    countRecursive(taskList)\n    return { total, completed }\n  }, [])\n\n  // Helper function to update progress stats\n  const updateProgressStats = useCallback(() => {\n    if (progressUpdateInProgress.current) return\n    progressUpdateInProgress.current = true\n\n    try {\n      const { total, completed } = countTasksAndCompleted(tasks)\n\n      if (total !== totalTasksCount || completed !== completedTasksCount) {\n        setTotalTasksCount(total)\n        setCompletedTasksCount(completed)\n        console.log(\n          `Progress updated: ${completed}/${total} tasks completed (${Math.round((completed / total || 0) * 100)}%)`,\n        )\n      }\n    } finally {\n      progressUpdateInProgress.current = false\n    }\n  }, [tasks, countTasksAndCompleted, totalTasksCount, completedTasksCount])\n\n  // Update progress whenever tasks change\n  useEffect(() => {\n    updateProgressStats()\n  }, [tasks, updateProgressStats])\n\n  // Memoize fetchTasks to prevent infinite loops\n  const fetchTasks = useCallback(async () => {\n    if (!list || !list.id) return\n\n    try {\n      setLoading(true)\n      const response = await api.get(`/api/todos/tasks/${list.id}`)\n\n      if (!isMounted.current) return\n\n      // Map backend response to our frontend structure\n      const mappedTasks = response.data.map((task) => ({\n        id: task.id,\n        title: task.title,\n        description: task.description || \"\",\n        status: task.status,\n        subtasks: task.subtasks || [],\n      }))\n\n      setTasks(mappedTasks)\n    } catch (error) {\n      console.error(\"Failed to fetch tasks:\", error)\n      if (isMounted.current) {\n        toast.error(\"Failed to load tasks\")\n      }\n    } finally {\n      if (isMounted.current) {\n        setLoading(false)\n      }\n    }\n  }, [list])\n\n  useEffect(() => {\n    if (list && list.id) {\n      fetchTasks()\n    }\n\n    // Clear the status update tracking when list changes\n    return () => {\n      statusUpdateInProgress.current = {}\n    }\n  }, [list, fetchTasks])\n\n  // Helper function to find a task by ID in the task hierarchy\n  const findTaskById = useCallback((taskList, taskId) => {\n    for (const task of taskList) {\n      if (task.id === taskId) {\n        return task\n      }\n      if (task.subtasks && task.subtasks.length > 0) {\n        const found = findTaskById(task.subtasks, taskId)\n        if (found) return found\n      }\n    }\n    return null\n  }, [])\n\n  // Helper function to find a parent task by child ID\n  const findParentTask = useCallback((taskList, childId, parentTask = null) => {\n    for (const task of taskList) {\n      if (task.subtasks && task.subtasks.some((st) => st.id === childId)) {\n        return task\n      }\n      if (task.subtasks && task.subtasks.length > 0) {\n        const found = findParentTask(task.subtasks, childId, task)\n        if (found) return found\n      }\n    }\n    return null\n  }, [])\n\n  const handleCreateTask = async (taskData) => {\n    try {\n      const payload = {\n        title: taskData.title,\n        description: taskData.description || \"\",\n        status: \"Todo\",\n        list_id: list.id,\n        parent_id: parentTaskId,\n      }\n\n      // If we're adding a subtask to a completed parent, we need to update the parent status\n      if (parentTaskId) {\n        const parentTask = findTaskById(tasks, parentTaskId)\n\n        // If parent is marked as done, update its status to Todo\n        if (parentTask && parentTask.status === \"Done\") {\n          await api.patch(`/api/todos/task/${parentTaskId}/status`, { status: \"Todo\" })\n          toast.info(\"Parent task reopened because a new subtask was added\")\n        }\n      }\n\n      await api.post(\"/api/todos/task\", payload)\n      if (isMounted.current) {\n        toast.success(`${parentTaskId ? \"Subtask\" : \"Task\"} created successfully`)\n        fetchTasks() // This will update the progress bar as well\n      }\n      return true\n    } catch (error) {\n      console.error(\"Failed to create task:\", error)\n      if (isMounted.current) {\n        toast.error(error.response?.data?.error || \"Failed to create task\")\n      }\n      throw error\n    }\n  }\n\n  const handleStatusChange = useCallback(\n    async (taskId, newStatus) => {\n      // Prevent duplicate updates for the same task\n      if (statusUpdateInProgress.current[taskId]) return\n      statusUpdateInProgress.current[taskId] = true\n\n      try {\n        // Find the task in our state\n        const task = findTaskById(tasks, taskId)\n        if (!task) {\n          console.error(`Task with ID ${taskId} not found`)\n          return\n        }\n\n        // If task has subtasks and not all are completed, prevent manual completion\n        if (\n          newStatus === \"Done\" &&\n          task.subtasks &&\n          task.subtasks.length > 0 &&\n          !task.subtasks.every((st) => st.status === \"Done\")\n        ) {\n          toast.error(\"Complete all subtasks before marking this task as done\", {\n            position: \"bottom-center\",\n            autoClose: 3000,\n          })\n          return\n        }\n\n        // Make the API call to update the database\n        await api.patch(`/api/todos/task/${taskId}/status`, { status: newStatus })\n\n        // Update our local state\n        setTasks((prevTasks) => {\n          const updateTaskStatus = (taskList) => {\n            return taskList.map((t) => {\n              if (t.id === taskId) {\n                return { ...t, status: newStatus }\n              }\n              if (t.subtasks && t.subtasks.length > 0) {\n                return { ...t, subtasks: updateTaskStatus(t.subtasks) }\n              }\n              return t\n            })\n          }\n          return updateTaskStatus(prevTasks)\n        })\n\n        // If we're reopening a task, check if it has a parent that needs to be reopened\n        if (newStatus === \"Todo\") {\n          const parentTask = findParentTask(tasks, taskId)\n          if (parentTask && parentTask.status === \"Done\") {\n            // Wait a bit to avoid race conditions\n            setTimeout(() => {\n              handleStatusChange(parentTask.id, \"Todo\")\n            }, 100)\n          }\n        }\n\n        // If we're completing a task, check if all siblings are also complete\n        // to potentially mark the parent as complete\n        if (newStatus === \"Done\") {\n          const parentTask = findParentTask(tasks, taskId)\n          if (parentTask && parentTask.status !== \"Done\") {\n            const allSiblingsComplete = parentTask.subtasks.every((st) =>\n              st.id === taskId ? newStatus === \"Done\" : st.status === \"Done\",\n            )\n\n            if (allSiblingsComplete) {\n              // Wait a bit to avoid race conditions\n              setTimeout(() => {\n                handleStatusChange(parentTask.id, \"Done\")\n              }, 100)\n            }\n          }\n        }\n\n        // If we're marking a task as Todo and it has subtasks that are Done,\n        // ask the user if they want to reopen all subtasks as well\n        if (\n          newStatus === \"Todo\" &&\n          task.subtasks &&\n          task.subtasks.length > 0 &&\n          task.subtasks.some((st) => st.status === \"Done\")\n        ) {\n          const shouldReopenSubtasks = window.confirm(\"Do you want to reopen all subtasks as well?\")\n\n          if (shouldReopenSubtasks) {\n            // Reopen all subtasks recursively\n            const reopenSubtasks = async (subtasks) => {\n              for (const subtask of subtasks) {\n                if (subtask.status === \"Done\") {\n                  await api.patch(`/api/todos/task/${subtask.id}/status`, { status: \"Todo\" })\n\n                  // Update our local state for this subtask\n                  setTasks((prevTasks) => {\n                    const updateSubtaskStatus = (taskList) => {\n                      return taskList.map((t) => {\n                        if (t.id === subtask.id) {\n                          return { ...t, status: \"Todo\" }\n                        }\n                        if (t.subtasks && t.subtasks.length > 0) {\n                          return { ...t, subtasks: updateSubtaskStatus(t.subtasks) }\n                        }\n                        return t\n                      })\n                    }\n                    return updateSubtaskStatus(prevTasks)\n                  })\n                }\n\n                // Recursively reopen nested subtasks\n                if (subtask.subtasks && subtask.subtasks.length > 0) {\n                  await reopenSubtasks(subtask.subtasks)\n                }\n              }\n            }\n\n            await reopenSubtasks(task.subtasks)\n          }\n        }\n\n        toast.success(`Task ${newStatus === \"Done\" ? \"completed\" : \"reopened\"}`)\n      } catch (error) {\n        console.error(\"Failed to update task status:\", error)\n        toast.error(\"Failed to update task status\")\n      } finally {\n        // Clear the update flag after a delay\n        setTimeout(() => {\n          statusUpdateInProgress.current[taskId] = false\n        }, 300)\n      }\n    },\n    [tasks, findTaskById, findParentTask],\n  )\n\n  const handleCreateSubtask = (parentId, parentTitle) => {\n    setParentTaskId(parentId)\n    setParentTaskTitle(parentTitle)\n    setShowCreateModal(true)\n  }\n\n  const handleMoveTask = (task) => {\n    setSelectedTask(task)\n    setShowMoveModal(true)\n  }\n\n  const getMotivationalQuote = () => {\n    const quotes = [\n      \"The secret of getting ahead is getting started.\",\n      \"Don't wait. The time will never be just right.\",\n      \"Start where you are. Use what you have. Do what you can.\",\n      \"The beginning is always the hardest. Keep going!\",\n      \"Small progress is still progress.\",\n    ]\n\n    return quotes[Math.floor(Math.random() * quotes.length)]\n  }\n\n  const calculateProgress = () => {\n    if (totalTasksCount === 0) return 0\n    return (completedTasksCount / totalTasksCount) * 100\n  }\n\n  return (\n    <div className=\"todo-list\">\n      <div className=\"todo-list-header\">\n        <h2 className=\"todo-list-title\">{list?.title || \"Tasks\"}</h2>\n        <button\n          className=\"button primary\"\n          onClick={() => {\n            setParentTaskId(null)\n            setParentTaskTitle(\"\")\n            setShowCreateModal(true)\n          }}\n        >\n          <Plus size={16} />\n          <span>Add Task</span>\n        </button>\n      </div>\n\n      {totalTasksCount > 0 && (\n        <div className=\"progress-container\">\n          <div className=\"progress-info\">\n            <span>\n              {completedTasksCount} of {totalTasksCount} tasks completed\n            </span>\n            <span>{Math.round(calculateProgress())}%</span>\n          </div>\n          <div className=\"progress-bar-container\">\n            <div\n              className=\"progress-bar-fill\"\n              style={{ width: `${calculateProgress()}%` }}\n              data-progress={`${Math.round(calculateProgress())}%`}\n            ></div>\n          </div>\n        </div>\n      )}\n\n      {loading ? (\n        <div className=\"loading-container\">\n          <Loader className=\"loading-spinner\" />\n        </div>\n      ) : tasks.length === 0 ? (\n        <div className=\"empty-tasks\">\n          <p>No tasks yet. Create your first task to get started!</p>\n          <button\n            className=\"button primary\"\n            onClick={() => {\n              setParentTaskId(null)\n              setParentTaskTitle(\"\")\n              setShowCreateModal(true)\n            }}\n          >\n            <Plus size={16} />\n            <span>Create Task</span>\n          </button>\n          <p className=\"motivational-quote\">{getMotivationalQuote()}</p>\n        </div>\n      ) : (\n        <div className=\"tasks-container\">\n          {tasks.map((task) => (\n            <TaskItem\n              key={task.id}\n              task={task}\n              onStatusChange={handleStatusChange}\n              onCreateSubtask={handleCreateSubtask}\n              depth={0}\n              fetchTasks={fetchTasks}\n              listId={list.id}\n              onMoveTask={handleMoveTask}\n            />\n          ))}\n        </div>\n      )}\n\n      <CreateTaskModal\n        isOpen={showCreateModal}\n        onClose={() => {\n          setShowCreateModal(false)\n          setParentTaskId(null)\n          setParentTaskTitle(\"\")\n        }}\n        onCreate={handleCreateTask}\n        isSubtask={!!parentTaskId}\n        parentTaskTitle={parentTaskTitle}\n        listId={list.id}\n      />\n\n      {selectedTask && (\n        <MoveTaskModal\n          isOpen={showMoveModal}\n          onClose={() => {\n            setShowMoveModal(false)\n            setSelectedTask(null)\n          }}\n          lists={lists}\n          currentListId={list.id}\n          taskTitle={selectedTask.title}\n          task={selectedTask}\n          fetchTasks={fetchTasks}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default TodoList;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}